#include "Draupnir.h"

/**
 * DraupnirCrc64 named constructor head
 *
 * This is the only accessible way of constructing a DraupnirCrc64 object.
 *
 * @return the DraupnirCrc64Builder to use for construction
 */
DraupnirCrc64Builder Draupnir::crc64() noexcept {
  return DraupnirCrc64Builder();
}

/**
 * Initial state consisting of all 0s
 *
 */
constexpr std::uint8_t Draupnir::zeros[512] = {
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
};

/**
 * Initial state consisting of all 1s
 *
 */
constexpr std::uint8_t Draupnir::ones[512] = {
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
  0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu, 0xffu,
};

/**
 * Initial state consisting of the decimal expansion of e
 *
 * Here, "e" is the Euler constant, the base for natural logarithms.
 *
 */
constexpr std::uint8_t Draupnir::e[512] = {
  0xb7u, 0xe1u, 0x51u, 0x62u, 0x8au, 0xedu, 0x2au, 0x6au, 0xbfu, 0x71u, 0x58u, 0x80u, 0x9cu, 0xf4u, 0xf3u, 0xc7u,
  0x62u, 0xe7u, 0x16u, 0x0fu, 0x38u, 0xb4u, 0xdau, 0x56u, 0xa7u, 0x84u, 0xd9u, 0x04u, 0x51u, 0x90u, 0xcfu, 0xefu,
  0x32u, 0x4eu, 0x77u, 0x38u, 0x92u, 0x6cu, 0xfbu, 0xe5u, 0xf4u, 0xbfu, 0x8du, 0x8du, 0x8cu, 0x31u, 0xd7u, 0x63u,
  0xdau, 0x06u, 0xc8u, 0x0au, 0xbbu, 0x11u, 0x85u, 0xebu, 0x4fu, 0x7cu, 0x7bu, 0x57u, 0x57u, 0xf5u, 0x95u, 0x84u,
  0x90u, 0xcfu, 0xd4u, 0x7du, 0x7cu, 0x19u, 0xbbu, 0x42u, 0x15u, 0x8du, 0x95u, 0x54u, 0xf7u, 0xb4u, 0x6bu, 0xceu,
  0xd5u, 0x5cu, 0x4du, 0x79u, 0xfdu, 0x5fu, 0x24u, 0xd6u, 0x61u, 0x3cu, 0x31u, 0xc3u, 0x83u, 0x9au, 0x2du, 0xdfu,
  0x8au, 0x9au, 0x27u, 0x6bu, 0xcfu, 0xbfu, 0xa1u, 0xc8u, 0x77u, 0xc5u, 0x62u, 0x84u, 0xdau, 0xb7u, 0x9cu, 0xd4u,
  0xc2u, 0xb3u, 0x29u, 0x3du, 0x20u, 0xe9u, 0xe5u, 0xeau, 0xf0u, 0x2au, 0xc6u, 0x0au, 0xccu, 0x93u, 0xedu, 0x87u,
  0x44u, 0x22u, 0xa5u, 0x2eu, 0xcbu, 0x23u, 0x8fu, 0xeeu, 0xe5u, 0xabu, 0x6au, 0xddu, 0x83u, 0x5fu, 0xd1u, 0xa0u,
  0x75u, 0x3du, 0x0au, 0x8fu, 0x78u, 0xe5u, 0x37u, 0xd2u, 0xb9u, 0x5bu, 0xb7u, 0x9du, 0x8du, 0xcau, 0xecu, 0x64u,
  0x2cu, 0x1eu, 0x9fu, 0x23u, 0xb8u, 0x29u, 0xb5u, 0xc2u, 0x78u, 0x0bu, 0xf3u, 0x87u, 0x37u, 0xdfu, 0x8bu, 0xb3u,
  0x00u, 0xd0u, 0x13u, 0x34u, 0xa0u, 0xd0u, 0xbdu, 0x86u, 0x45u, 0xcbu, 0xfau, 0x73u, 0xa6u, 0x16u, 0x0fu, 0xfeu,
  0x39u, 0x3cu, 0x48u, 0xcbu, 0xbbu, 0xcau, 0x06u, 0x0fu, 0x0fu, 0xf8u, 0xecu, 0x6du, 0x31u, 0xbeu, 0xb5u, 0xccu,
  0xeeu, 0xd7u, 0xf2u, 0xf0u, 0xbbu, 0x08u, 0x80u, 0x17u, 0x16u, 0x3bu, 0xc6u, 0x0du, 0xf4u, 0x5au, 0x0eu, 0xcbu,
  0x1bu, 0xcdu, 0x28u, 0x9bu, 0x06u, 0xcbu, 0xbfu, 0xeau, 0x21u, 0xadu, 0x08u, 0xe1u, 0x84u, 0x7fu, 0x3fu, 0x73u,
  0x78u, 0xd5u, 0x6cu, 0xedu, 0x94u, 0x64u, 0x0du, 0x6eu, 0xf0u, 0xd3u, 0xd3u, 0x7bu, 0xe6u, 0x70u, 0x08u, 0xe1u,
  0x86u, 0xd1u, 0xbfu, 0x27u, 0x5bu, 0x9bu, 0x24u, 0x1du, 0xebu, 0x64u, 0x74u, 0x9au, 0x47u, 0xdfu, 0xdfu, 0xb9u,
  0x66u, 0x32u, 0xc3u, 0xebu, 0x06u, 0x1bu, 0x64u, 0x72u, 0xbbu, 0xf8u, 0x4cu, 0x26u, 0x14u, 0x4eu, 0x49u, 0xc2u,
  0xd0u, 0x4cu, 0x32u, 0x4eu, 0xf1u, 0x0du, 0xe5u, 0x13u, 0xd3u, 0xf5u, 0x11u, 0x4bu, 0x8bu, 0x5du, 0x37u, 0x4du,
  0x93u, 0xcbu, 0x88u, 0x79u, 0xc7u, 0xd5u, 0x2fu, 0xfdu, 0x72u, 0xbau, 0x0au, 0xaeu, 0x72u, 0x77u, 0xdau, 0x7bu,
  0xa1u, 0xb4u, 0xafu, 0x14u, 0x88u, 0xd8u, 0xe8u, 0x36u, 0xafu, 0x14u, 0x86u, 0x5eu, 0x6cu, 0x37u, 0xabu, 0x68u,
  0x76u, 0xfeu, 0x69u, 0x0bu, 0x57u, 0x11u, 0x21u, 0x38u, 0x2au, 0xf3u, 0x41u, 0xafu, 0xe9u, 0x4fu, 0x77u, 0xbcu,
  0xf0u, 0x6cu, 0x83u, 0xb8u, 0xffu, 0x56u, 0x75u, 0xf0u, 0x97u, 0x90u, 0x74u, 0xadu, 0x9au, 0x78u, 0x7bu, 0xc5u,
  0xb9u, 0xbdu, 0x4bu, 0x0cu, 0x59u, 0x37u, 0xd3u, 0xedu, 0xe4u, 0xc3u, 0xa7u, 0x93u, 0x96u, 0x21u, 0x5eu, 0xdau,
  0xb1u, 0xf5u, 0x7du, 0x0bu, 0x5au, 0x7du, 0xb4u, 0x61u, 0xddu, 0x8fu, 0x3cu, 0x75u, 0x54u, 0x0du, 0x00u, 0x12u,
  0x1fu, 0xd5u, 0x6eu, 0x95u, 0xf8u, 0xc7u, 0x31u, 0xe9u, 0xc4u, 0xd7u, 0x22u, 0x1bu, 0xbeu, 0xd0u, 0xc6u, 0x2bu,
  0xb5u, 0xa8u, 0x78u, 0x04u, 0xb6u, 0x79u, 0xa0u, 0xcau, 0xa4u, 0x1du, 0x80u, 0x2au, 0x46u, 0x04u, 0xc3u, 0x11u,
  0xb7u, 0x1du, 0xe3u, 0xe5u, 0xc6u, 0xb4u, 0x00u, 0xe0u, 0x24u, 0xa6u, 0x66u, 0x8cu, 0xcfu, 0x2eu, 0x2du, 0xe8u,
  0x68u, 0x76u, 0xe4u, 0xf5u, 0xc5u, 0x00u, 0x00u, 0xf0u, 0xa9u, 0x3bu, 0x3au, 0xa7u, 0xe6u, 0x34u, 0x2bu, 0x30u,
  0x2au, 0x0au, 0x47u, 0x37u, 0x3bu, 0x25u, 0xf7u, 0x3eu, 0x3bu, 0x26u, 0xd5u, 0x69u, 0xfeu, 0x22u, 0x91u, 0xadu,
  0x36u, 0xd6u, 0xa1u, 0x47u, 0xd1u, 0x06u, 0x0bu, 0x87u, 0x1au, 0x28u, 0x01u, 0xf9u, 0x78u, 0x37u, 0x64u, 0x08u,
  0x2fu, 0xf5u, 0x92u, 0xd9u, 0x14u, 0x0du, 0xb1u, 0xe9u, 0x39u, 0x9du, 0xf4u, 0xb0u, 0xe1u, 0x4cu, 0xa8u, 0xe8u,
};

/**
 * Initial state consisting of the decimal expansion of pi
 *
 * Here, "pi" is the ratio of the diameter to the circumference.
 *
 */
constexpr std::uint8_t Draupnir::pi[512] = {
  0x24u, 0x3fu, 0x6au, 0x88u, 0x85u, 0xa3u, 0x08u, 0xd3u, 0x13u, 0x19u, 0x8au, 0x2eu, 0x03u, 0x70u, 0x73u, 0x44u,
  0xa4u, 0x09u, 0x38u, 0x22u, 0x29u, 0x9fu, 0x31u, 0xd0u, 0x08u, 0x2eu, 0xfau, 0x98u, 0xecu, 0x4eu, 0x6cu, 0x89u,
  0x45u, 0x28u, 0x21u, 0xe6u, 0x38u, 0xd0u, 0x13u, 0x77u, 0xbeu, 0x54u, 0x66u, 0xcfu, 0x34u, 0xe9u, 0x0cu, 0x6cu,
  0xc0u, 0xacu, 0x29u, 0xb7u, 0xc9u, 0x7cu, 0x50u, 0xddu, 0x3fu, 0x84u, 0xd5u, 0xb5u, 0xb5u, 0x47u, 0x09u, 0x17u,
  0x92u, 0x16u, 0xd5u, 0xd9u, 0x89u, 0x79u, 0xfbu, 0x1bu, 0xd1u, 0x31u, 0x0bu, 0xa6u, 0x98u, 0xdfu, 0xb5u, 0xacu,
  0x2fu, 0xfdu, 0x72u, 0xdbu, 0xd0u, 0x1au, 0xdfu, 0xb7u, 0xb8u, 0xe1u, 0xafu, 0xedu, 0x6au, 0x26u, 0x7eu, 0x96u,
  0xbau, 0x7cu, 0x90u, 0x45u, 0xf1u, 0x2cu, 0x7fu, 0x99u, 0x24u, 0xa1u, 0x99u, 0x47u, 0xb3u, 0x91u, 0x6cu, 0xf7u,
  0x08u, 0x01u, 0xf2u, 0xe2u, 0x85u, 0x8eu, 0xfcu, 0x16u, 0x63u, 0x69u, 0x20u, 0xd8u, 0x71u, 0x57u, 0x4eu, 0x69u,
  0xa4u, 0x58u, 0xfeu, 0xa3u, 0xf4u, 0x93u, 0x3du, 0x7eu, 0x0du, 0x95u, 0x74u, 0x8fu, 0x72u, 0x8eu, 0xb6u, 0x58u,
  0x71u, 0x8bu, 0xcdu, 0x58u, 0x82u, 0x15u, 0x4au, 0xeeu, 0x7bu, 0x54u, 0xa4u, 0x1du, 0xc2u, 0x5au, 0x59u, 0xb5u,
  0x9cu, 0x30u, 0xd5u, 0x39u, 0x2au, 0xf2u, 0x60u, 0x13u, 0xc5u, 0xd1u, 0xb0u, 0x23u, 0x28u, 0x60u, 0x85u, 0xf0u,
  0xcau, 0x41u, 0x79u, 0x18u, 0xb8u, 0xdbu, 0x38u, 0xefu, 0x8eu, 0x79u, 0xdcu, 0xb0u, 0x60u, 0x3au, 0x18u, 0x0eu,
  0x6cu, 0x9eu, 0x0eu, 0x8bu, 0xb0u, 0x1eu, 0x8au, 0x3eu, 0xd7u, 0x15u, 0x77u, 0xc1u, 0xbdu, 0x31u, 0x4bu, 0x27u,
  0x78u, 0xafu, 0x2fu, 0xdau, 0x55u, 0x60u, 0x5cu, 0x60u, 0xe6u, 0x55u, 0x25u, 0xf3u, 0xaau, 0x55u, 0xabu, 0x94u,
  0x57u, 0x48u, 0x98u, 0x62u, 0x63u, 0xe8u, 0x14u, 0x40u, 0x55u, 0xcau, 0x39u, 0x6au, 0x2au, 0xabu, 0x10u, 0xb6u,
  0xb4u, 0xccu, 0x5cu, 0x34u, 0x11u, 0x41u, 0xe8u, 0xceu, 0xa1u, 0x54u, 0x86u, 0xafu, 0x7cu, 0x72u, 0xe9u, 0x93u,
  0xb3u, 0xeeu, 0x14u, 0x11u, 0x63u, 0x6fu, 0xbcu, 0x2au, 0x2bu, 0xa9u, 0xc5u, 0x5du, 0x74u, 0x18u, 0x31u, 0xf6u,
  0xceu, 0x5cu, 0x3eu, 0x16u, 0x9bu, 0x87u, 0x93u, 0x1eu, 0xafu, 0xd6u, 0xbau, 0x33u, 0x6cu, 0x24u, 0xcfu, 0x5cu,
  0x7au, 0x32u, 0x53u, 0x81u, 0x28u, 0x95u, 0x86u, 0x77u, 0x3bu, 0x8fu, 0x48u, 0x98u, 0x6bu, 0x4bu, 0xb9u, 0xafu,
  0xc4u, 0xbfu, 0xe8u, 0x1bu, 0x66u, 0x28u, 0x21u, 0x93u, 0x61u, 0xd8u, 0x09u, 0xccu, 0xfbu, 0x21u, 0xa9u, 0x91u,
  0x48u, 0x7cu, 0xacu, 0x60u, 0x5du, 0xecu, 0x80u, 0x32u, 0xefu, 0x84u, 0x5du, 0x5du, 0xe9u, 0x85u, 0x75u, 0xb1u,
  0xdcu, 0x26u, 0x23u, 0x02u, 0xebu, 0x65u, 0x1bu, 0x88u, 0x23u, 0x89u, 0x3eu, 0x81u, 0xd3u, 0x96u, 0xacu, 0xc5u,
  0x0fu, 0x6du, 0x6fu, 0xf3u, 0x83u, 0xf4u, 0x42u, 0x39u, 0x2eu, 0x0bu, 0x44u, 0x82u, 0xa4u, 0x84u, 0x20u, 0x04u,
  0x69u, 0xc8u, 0xf0u, 0x4au, 0x9eu, 0x1fu, 0x9bu, 0x5eu, 0x21u, 0xc6u, 0x68u, 0x42u, 0xf6u, 0xe9u, 0x6cu, 0x9au,
  0x67u, 0x0cu, 0x9cu, 0x61u, 0xabu, 0xd3u, 0x88u, 0xf0u, 0x6au, 0x51u, 0xa0u, 0xd2u, 0xd8u, 0x54u, 0x2fu, 0x68u,
  0x96u, 0x0fu, 0xa7u, 0x28u, 0xabu, 0x51u, 0x33u, 0xa3u, 0x6eu, 0xefu, 0x0bu, 0x6cu, 0x13u, 0x7au, 0x3bu, 0xe4u,
  0xbau, 0x3bu, 0xf0u, 0x50u, 0x7eu, 0xfbu, 0x2au, 0x98u, 0xa1u, 0xf1u, 0x65u, 0x1du, 0x39u, 0xafu, 0x01u, 0x76u,
  0x66u, 0xcau, 0x59u, 0x3eu, 0x82u, 0x43u, 0x0eu, 0x88u, 0x8cu, 0xeeu, 0x86u, 0x19u, 0x45u, 0x6fu, 0x9fu, 0xb4u,
  0x7du, 0x84u, 0xa5u, 0xc3u, 0x3bu, 0x8bu, 0x5eu, 0xbeu, 0xe0u, 0x6fu, 0x75u, 0xd8u, 0x85u, 0xc1u, 0x20u, 0x73u,
  0x40u, 0x1au, 0x44u, 0x9fu, 0x56u, 0xc1u, 0x6au, 0xa6u, 0x4eu, 0xd3u, 0xaau, 0x62u, 0x36u, 0x3fu, 0x77u, 0x06u,
  0x1bu, 0xfeu, 0xdfu, 0x72u, 0x42u, 0x9bu, 0x02u, 0x3du, 0x37u, 0xd0u, 0xd7u, 0x24u, 0xd0u, 0x0au, 0x12u, 0x48u,
  0xdbu, 0x0fu, 0xeau, 0xd3u, 0x49u, 0xf1u, 0xc0u, 0x9bu, 0x07u, 0x53u, 0x72u, 0xc9u, 0x80u, 0x99u, 0x1bu, 0x7bu,
};

/**
 * Initial state consisting of the decimal expansion of gamma
 *
 * Here, "gamma" is the Euler-Mascheroni constant.
 *
 */
constexpr std::uint8_t Draupnir::gamma[512] = {
  0x93u, 0xc4u, 0x67u, 0xe3u, 0x7du, 0xb0u, 0xc7u, 0xa4u, 0xd1u, 0xbeu, 0x3fu, 0x81u, 0x01u, 0x52u, 0xcbu, 0x56u,
  0xa1u, 0xceu, 0xccu, 0x3au, 0xf6u, 0x5cu, 0xc0u, 0x19u, 0x0cu, 0x03u, 0xdfu, 0x34u, 0x70u, 0x9au, 0xffu, 0xbdu,
  0x8eu, 0x4bu, 0x59u, 0xfau, 0x03u, 0xa9u, 0xf0u, 0xeeu, 0xd0u, 0x64u, 0x9cu, 0xcbu, 0x62u, 0x10u, 0x57u, 0xd1u,
  0x10u, 0x56u, 0xaeu, 0x91u, 0x32u, 0x13u, 0x5au, 0x08u, 0xe4u, 0x3bu, 0x46u, 0x73u, 0xd7u, 0x4bu, 0xafu, 0xeau,
  0x58u, 0xdeu, 0xb8u, 0x78u, 0xccu, 0x86u, 0xd7u, 0x33u, 0xdbu, 0xe7u, 0xbfu, 0x38u, 0x15u, 0x4bu, 0x36u, 0xcfu,
  0x8au, 0x96u, 0xd1u, 0x56u, 0x78u, 0x99u, 0xaau, 0xaeu, 0x0cu, 0x09u, 0xd4u, 0xc8u, 0xb6u, 0xb7u, 0xb8u, 0x6fu,
  0xd2u, 0xa1u, 0xeau, 0x1du, 0xe6u, 0x2fu, 0xf8u, 0x64u, 0x3eu, 0xc7u, 0xc2u, 0x71u, 0x82u, 0x79u, 0x77u, 0x22u,
  0x5eu, 0x6au, 0xc2u, 0xf0u, 0xbdu, 0x61u, 0xc7u, 0x46u, 0x96u, 0x15u, 0x42u, 0xa3u, 0xceu, 0x3bu, 0xeau, 0x5du,
  0xb5u, 0x4fu, 0xe7u, 0x0eu, 0x63u, 0xe6u, 0xd0u, 0x9fu, 0x8fu, 0xc2u, 0x86u, 0x58u, 0xe8u, 0x05u, 0x67u, 0xa4u,
  0x7cu, 0xfdu, 0xe6u, 0x0eu, 0xe7u, 0x41u, 0xe5u, 0xd8u, 0x5au, 0x7bu, 0xd4u, 0x69u, 0x31u, 0xceu, 0xd8u, 0x22u,
  0x03u, 0x65u, 0x59u, 0x49u, 0x64u, 0xb8u, 0x39u, 0x89u, 0x6fu, 0xcau, 0xabu, 0xccu, 0xc9u, 0xb3u, 0x19u, 0x59u,
  0xc0u, 0x83u, 0xf2u, 0x2au, 0xd3u, 0xeeu, 0x59u, 0x1cu, 0x32u, 0xfau, 0xb2u, 0xc7u, 0x44u, 0x8fu, 0x2au, 0x05u,
  0x7du, 0xb2u, 0xdbu, 0x49u, 0xeeu, 0x52u, 0xe0u, 0x18u, 0x27u, 0x41u, 0xe5u, 0x38u, 0x65u, 0xf0u, 0x04u, 0xccu,
  0x8eu, 0x70u, 0x4bu, 0x7cu, 0x5cu, 0x40u, 0xbfu, 0x30u, 0x4cu, 0x4du, 0x8cu, 0x4fu, 0x13u, 0xedu, 0xf6u, 0x04u,
  0x7cu, 0x55u, 0x53u, 0x02u, 0xd2u, 0x23u, 0x8du, 0x8cu, 0xe1u, 0x1du, 0xf2u, 0x42u, 0x4fu, 0x1bu, 0x66u, 0xc2u,
  0xc5u, 0xd2u, 0x38u, 0xd0u, 0x74u, 0x4du, 0xb6u, 0x79u, 0xafu, 0x28u, 0x90u, 0x48u, 0x70u, 0x31u, 0xf9u, 0xc0u,
  0xaeu, 0xa1u, 0xc4u, 0xbbu, 0x6fu, 0xe9u, 0x55u, 0x4eu, 0xe5u, 0x28u, 0xfdu, 0xf1u, 0xb0u, 0x5eu, 0x5bu, 0x25u,
  0x62u, 0x23u, 0xb2u, 0xf0u, 0x92u, 0x15u, 0xf3u, 0x71u, 0x9fu, 0x9cu, 0x7cu, 0xccu, 0x69u, 0xddu, 0xf1u, 0x72u,
  0xd0u, 0xd6u, 0x23u, 0x42u, 0x17u, 0xfcu, 0xc0u, 0x03u, 0x7fu, 0x18u, 0xb9u, 0x3eu, 0xf5u, 0x38u, 0x91u, 0x30u,
  0xb7u, 0xa6u, 0x61u, 0xe5u, 0xc2u, 0x6eu, 0x54u, 0x21u, 0x40u, 0x68u, 0xbbu, 0xcau, 0xfeu, 0xa3u, 0x2au, 0x67u,
  0x81u, 0x8bu, 0xd3u, 0x07u, 0x5au, 0xd1u, 0xf5u, 0xc7u, 0xe9u, 0xccu, 0x3du, 0x17u, 0x37u, 0xfbu, 0x28u, 0x17u,
  0x1bu, 0xafu, 0x84u, 0xdbu, 0xb6u, 0x61u, 0x2bu, 0x78u, 0x81u, 0xc1u, 0xa4u, 0x8eu, 0x43u, 0x9cu, 0xd0u, 0x3au,
  0x92u, 0xbfu, 0x52u, 0x22u, 0x5au, 0x2bu, 0x38u, 0xe6u, 0x54u, 0x2eu, 0x9fu, 0x72u, 0x2bu, 0xceu, 0x15u, 0xa3u,
  0x81u, 0xb5u, 0x75u, 0x3eu, 0xa8u, 0x42u, 0x76u, 0x33u, 0x81u, 0xccu, 0xaeu, 0x83u, 0x51u, 0x2bu, 0x30u, 0x51u,
  0x1bu, 0x32u, 0xe5u, 0xe8u, 0xd8u, 0x03u, 0x62u, 0x14u, 0x9au, 0xd0u, 0x30u, 0xaau, 0xbau, 0x5fu, 0x3au, 0x57u,
  0x98u, 0xbbu, 0x22u, 0xaau, 0x7eu, 0xc1u, 0xb6u, 0xd0u, 0xf1u, 0x79u, 0x03u, 0xf4u, 0xe1u, 0xf3u, 0xa0u, 0x67u,
  0x31u, 0x07u, 0x2bu, 0x10u, 0xe0u, 0x42u, 0x18u, 0x38u, 0x0cu, 0x3fu, 0x5bu, 0xe7u, 0xd4u, 0x4cu, 0x69u, 0x37u,
  0xb6u, 0xe7u, 0x9cu, 0xf6u, 0x76u, 0x55u, 0xf0u, 0x72u, 0x30u, 0x45u, 0x6fu, 0x98u, 0x34u, 0x03u, 0x36u, 0xe1u,
  0x16u, 0x63u, 0x30u, 0xfbu, 0xefu, 0x5fu, 0x3cu, 0xdbu, 0xe2u, 0x9bu, 0x79u, 0x29u, 0xc3u, 0xbfu, 0xbcu, 0xf4u,
  0x29u, 0x8cu, 0x94u, 0xecu, 0xfau, 0x77u, 0xdbu, 0xb0u, 0x6au, 0xb2u, 0x6cu, 0x11u, 0x89u, 0x0eu, 0xa9u, 0xe6u,
  0x34u, 0x40u, 0xb1u, 0x09u, 0x21u, 0xfbu, 0x25u, 0x36u, 0x1bu, 0x34u, 0xc7u, 0xb9u, 0x34u, 0x2au, 0x13u, 0xe3u,
  0xfbu, 0x6au, 0x91u, 0xc3u, 0x5fu, 0x67u, 0xb9u, 0x51u, 0x63u, 0xa9u, 0x1fu, 0x91u, 0x6au, 0xa7u, 0xb2u, 0x53u,
};

/**
 * Initial state consisting of the decimal expansion of omega
 *
 * Here, "gamma" is W(1), where "W" is Lambert's W function.
 *
 */
constexpr std::uint8_t Draupnir::omega[512] = {
  0x91u, 0x30u, 0x4du, 0x7cu, 0x74u, 0xb2u, 0xbau, 0x5eu, 0xafu, 0xddu, 0xaau, 0x62u, 0x86u, 0xdcu, 0x28u, 0xe1u,
  0x6eu, 0x86u, 0xecu, 0xe8u, 0x57u, 0x1au, 0x88u, 0x0cu, 0x93u, 0xf7u, 0x03u, 0x52u, 0x8eu, 0x37u, 0x83u, 0x92u,
  0x2fu, 0xdau, 0x0au, 0xccu, 0xf0u, 0x13u, 0xa1u, 0x4du, 0x76u, 0xcbu, 0x5au, 0xfau, 0x70u, 0x61u, 0xa6u, 0x37u,
  0x58u, 0xfcu, 0xd9u, 0x08u, 0xeeu, 0xa0u, 0x85u, 0x25u, 0x99u, 0x70u, 0x3au, 0x85u, 0xd8u, 0x38u, 0x03u, 0x57u,
  0x7du, 0x5cu, 0xceu, 0x8au, 0x5eu, 0xecu, 0xa2u, 0xc8u, 0xd8u, 0x82u, 0x75u, 0x15u, 0x3eu, 0x5bu, 0x39u, 0x89u,
  0x65u, 0x20u, 0x54u, 0xf6u, 0xbcu, 0x1eu, 0x14u, 0x43u, 0x84u, 0x47u, 0x19u, 0x1fu, 0x09u, 0x7bu, 0x5fu, 0x3au,
  0xe7u, 0xa2u, 0x35u, 0x87u, 0x3cu, 0x73u, 0x05u, 0x86u, 0xa9u, 0x6eu, 0x66u, 0x22u, 0x90u, 0x2au, 0xc7u, 0x1bu,
  0x46u, 0xacu, 0x33u, 0x86u, 0x84u, 0x2eu, 0x8eu, 0x8eu, 0x49u, 0xafu, 0x6au, 0xeau, 0x71u, 0xf8u, 0x01u, 0xb0u,
  0x91u, 0x06u, 0x37u, 0x06u, 0x40u, 0x7fu, 0x8bu, 0x03u, 0xbdu, 0xc5u, 0x72u, 0xcbu, 0xc9u, 0x06u, 0x2au, 0xe7u,
  0xa1u, 0xc4u, 0xe3u, 0x8au, 0xacu, 0x6au, 0x18u, 0x99u, 0xcbu, 0xcfu, 0xb8u, 0xc0u, 0xedu, 0x75u, 0x85u, 0xe9u,
  0xc7u, 0xb6u, 0x73u, 0xacu, 0xb7u, 0x93u, 0xa2u, 0xb8u, 0x8cu, 0x78u, 0x97u, 0x5cu, 0x66u, 0x94u, 0x6du, 0xb0u,
  0xaeu, 0xfcu, 0xe4u, 0x62u, 0x1bu, 0xcau, 0xb1u, 0xa1u, 0x5bu, 0xcau, 0x97u, 0x78u, 0x7du, 0xfau, 0xf1u, 0x46u,
  0xd1u, 0x1cu, 0xc1u, 0xc0u, 0x55u, 0x76u, 0x44u, 0x57u, 0xc8u, 0x05u, 0xa1u, 0xdfu, 0xbfu, 0xc9u, 0x5cu, 0x80u,
  0xd2u, 0x15u, 0xe5u, 0xe4u, 0x0bu, 0x31u, 0x76u, 0x10u, 0x05u, 0x53u, 0xa4u, 0xe2u, 0x0eu, 0x8fu, 0xb0u, 0x8fu,
  0x2du, 0xc4u, 0x8eu, 0x31u, 0xdeu, 0x22u, 0x27u, 0x3eu, 0x4eu, 0xa5u, 0xa4u, 0xf6u, 0xddu, 0xc2u, 0x21u, 0x60u,
  0x71u, 0x05u, 0x2bu, 0xa2u, 0xefu, 0x9cu, 0x86u, 0x96u, 0xd8u, 0x28u, 0x2au, 0xc9u, 0xa9u, 0x77u, 0xe0u, 0x2du,
  0x6au, 0x07u, 0x18u, 0x68u, 0xb7u, 0x8cu, 0xd4u, 0x6eu, 0x45u, 0x39u, 0x68u, 0x04u, 0x76u, 0xcdu, 0x20u, 0xc9u,
  0x9du, 0x65u, 0x55u, 0x00u, 0x88u, 0xa1u, 0x44u, 0x8cu, 0xd0u, 0x07u, 0x98u, 0x2cu, 0xd9u, 0x9cu, 0x55u, 0x3cu,
  0xf9u, 0x5au, 0x89u, 0xc9u, 0x88u, 0xffu, 0x68u, 0xa8u, 0x91u, 0x05u, 0xbdu, 0x1bu, 0x43u, 0xd1u, 0x11u, 0x41u,
  0xcdu, 0x95u, 0xbfu, 0x9bu, 0x42u, 0x71u, 0x43u, 0x86u, 0xf3u, 0xffu, 0x0cu, 0x8eu, 0x97u, 0xfeu, 0x2cu, 0x58u,
  0xe7u, 0xffu, 0xbeu, 0xabu, 0x08u, 0xcfu, 0x5eu, 0x95u, 0x09u, 0x9eu, 0xafu, 0xbbu, 0x58u, 0xf5u, 0x0du, 0x38u,
  0x57u, 0xf7u, 0x0au, 0xb6u, 0x09u, 0x34u, 0xaeu, 0x0bu, 0x01u, 0x40u, 0x2au, 0x0eu, 0xccu, 0xd7u, 0xa6u, 0x0du,
  0x0cu, 0xf0u, 0x86u, 0x55u, 0x2bu, 0x84u, 0x2eu, 0x95u, 0x21u, 0x1du, 0xb7u, 0xd0u, 0xf2u, 0x2bu, 0x88u, 0x7cu,
  0x95u, 0x6bu, 0x53u, 0xc3u, 0xd6u, 0x8eu, 0xf6u, 0x38u, 0xbbu, 0x67u, 0x13u, 0x6cu, 0x85u, 0xe8u, 0x88u, 0xb6u,
  0x07u, 0x39u, 0xabu, 0x2bu, 0x16u, 0x9cu, 0x8fu, 0xb4u, 0xccu, 0x7bu, 0xdcu, 0xc4u, 0x75u, 0x51u, 0xb9u, 0xcau,
  0xd9u, 0x14u, 0x33u, 0xf9u, 0x2du, 0x93u, 0x38u, 0x51u, 0x80u, 0xe9u, 0xd4u, 0xb4u, 0xdfu, 0x00u, 0x02u, 0xe1u,
  0x9du, 0xd5u, 0x74u, 0x23u, 0xe5u, 0x45u, 0x95u, 0x2cu, 0x46u, 0x3eu, 0x24u, 0x9cu, 0x02u, 0xeau, 0x8du, 0x2du,
  0x7fu, 0x85u, 0xcdu, 0xb2u, 0x83u, 0x34u, 0xe5u, 0xdeu, 0x30u, 0xafu, 0xa1u, 0x8fu, 0xcbu, 0xccu, 0x77u, 0xf8u,
  0x79u, 0x81u, 0x60u, 0x84u, 0x92u, 0xaau, 0xe5u, 0xd3u, 0xbbu, 0x82u, 0x70u, 0x3bu, 0x26u, 0xc4u, 0x1du, 0xf3u,
  0xbau, 0x21u, 0xb2u, 0x60u, 0x15u, 0xb5u, 0xbdu, 0x71u, 0x4fu, 0xf2u, 0x22u, 0x41u, 0x5bu, 0x4bu, 0xa4u, 0x75u,
  0x68u, 0x61u, 0x7du, 0xbeu, 0x1du, 0xe1u, 0x0fu, 0x11u, 0xefu, 0x16u, 0xc5u, 0xffu, 0xaau, 0x34u, 0x44u, 0xfau,
  0xc5u, 0x30u, 0xadu, 0x97u, 0xb9u, 0x86u, 0x93u, 0xe4u, 0x0bu, 0xdcu, 0x6du, 0x4cu, 0xd7u, 0xe3u, 0xdbu, 0xe8u,
};

/**
 * Initial state consisting of the decimal expansion of 1/e
 *
 * Here, "e" is the Euler constant, the base for natural logarithms.
 *
 */
constexpr std::uint8_t Draupnir::invE[512] = {
  0x5eu, 0x2du, 0x58u, 0xd8u, 0xb3u, 0xbcu, 0xdfu, 0x1au, 0xbau, 0xdeu, 0xc7u, 0x82u, 0x90u, 0x54u, 0xf9u, 0x0du,
  0xdau, 0x98u, 0x05u, 0xaau, 0xb5u, 0x6cu, 0x77u, 0x33u, 0x30u, 0x24u, 0xb9u, 0xd0u, 0xa5u, 0x07u, 0xdau, 0xedu,
  0xb1u, 0x64u, 0x00u, 0xbfu, 0x47u, 0x2bu, 0x42u, 0x15u, 0xb8u, 0x24u, 0x5bu, 0x66u, 0x9du, 0x90u, 0xd2u, 0x7au,
  0x5au, 0xeau, 0x55u, 0x50u, 0x96u, 0x8du, 0xc3u, 0x92u, 0x29u, 0xf0u, 0x3cu, 0x62u, 0x76u, 0xdcu, 0xaau, 0x58u,
  0xc0u, 0xecu, 0x2bu, 0x3bu, 0xdbu, 0xaau, 0x92u, 0x70u, 0xd9u, 0x25u, 0xfdu, 0xbdu, 0x58u, 0x0cu, 0xf1u, 0x4du,
  0xc0u, 0x87u, 0xc3u, 0xf3u, 0xfeu, 0x44u, 0x46u, 0x26u, 0xcdu, 0x2au, 0xdeu, 0x4eu, 0x58u, 0xd1u, 0x12u, 0x43u,
  0x67u, 0xa8u, 0x1bu, 0xeau, 0x37u, 0x64u, 0xedu, 0x4fu, 0x7du, 0xd5u, 0xc1u, 0xb8u, 0xd9u, 0x0cu, 0x4eu, 0xf7u,
  0xd6u, 0xddu, 0x91u, 0x88u, 0xd1u, 0xc9u, 0x56u, 0xa5u, 0xa3u, 0xbeu, 0x55u, 0xcdu, 0x31u, 0xb7u, 0x80u, 0x2cu,
  0x64u, 0xd4u, 0x4bu, 0xccu, 0x33u, 0x36u, 0xceu, 0xbbu, 0x7cu, 0x4du, 0x48u, 0x6du, 0x3au, 0xccu, 0x24u, 0xd5u,
  0x34u, 0xeeu, 0xbcu, 0x13u, 0xe8u, 0x6cu, 0x03u, 0x87u, 0x9eu, 0xdbu, 0xb8u, 0x04u, 0xfau, 0xf9u, 0xf5u, 0x70u,
  0xfdu, 0x82u, 0x8fu, 0xd2u, 0x58u, 0x1cu, 0x26u, 0xfeu, 0x7fu, 0x6au, 0xb1u, 0x67u, 0xdbu, 0x5fu, 0x92u, 0x09u,
  0x4au, 0x50u, 0xddu, 0xe2u, 0x11u, 0xdfu, 0x54u, 0x49u, 0x7au, 0x68u, 0x58u, 0xf4u, 0x74u, 0x29u, 0x56u, 0x89u,
  0x53u, 0x86u, 0xfdu, 0x82u, 0x10u, 0xb9u, 0x5fu, 0x9bu, 0x53u, 0x59u, 0x5fu, 0xb9u, 0x5bu, 0xf7u, 0xa9u, 0x5du,
  0xb6u, 0x90u, 0xdfu, 0x00u, 0x7eu, 0x1bu, 0xadu, 0x65u, 0x46u, 0xc3u, 0x25u, 0xf1u, 0x12u, 0x88u, 0x33u, 0xf3u,
  0x9du, 0xf0u, 0x98u, 0x60u, 0x48u, 0x1cu, 0x19u, 0x1du, 0x6cu, 0x06u, 0x90u, 0xb2u, 0xf6u, 0xd6u, 0xeeu, 0x34u,
  0x19u, 0x73u, 0xf3u, 0xbdu, 0x82u, 0x50u, 0xa1u, 0x04u, 0x5au, 0xbeu, 0x7bu, 0xc3u, 0x9bu, 0x1cu, 0x28u, 0x79u,
  0x66u, 0xcdu, 0x7au, 0x55u, 0x85u, 0xc1u, 0xa6u, 0x8au, 0x41u, 0x72u, 0xbdu, 0xdfu, 0xabu, 0x76u, 0xb3u, 0x84u,
  0xefu, 0xf1u, 0x70u, 0x72u, 0x79u, 0x51u, 0xe3u, 0xbfu, 0x31u, 0x2cu, 0xe7u, 0xdfu, 0xc4u, 0x2bu, 0x6fu, 0x43u,
  0xfau, 0x63u, 0xc0u, 0xe5u, 0x23u, 0x7cu, 0xf2u, 0xbeu, 0xd6u, 0x4fu, 0xefu, 0x71u, 0x30u, 0x18u, 0xd5u, 0xfau,
  0xc4u, 0x7fu, 0xf1u, 0x0eu, 0x53u, 0xb2u, 0x5cu, 0xaeu, 0xcbu, 0x10u, 0x42u, 0x17u, 0xccu, 0x93u, 0x8cu, 0x3cu,
  0x85u, 0x58u, 0xb9u, 0x2eu, 0xa3u, 0x4eu, 0x5fu, 0xebu, 0xf7u, 0x31u, 0xe0u, 0xefu, 0x74u, 0x19u, 0xd4u, 0x12u,
  0x47u, 0xe6u, 0xb8u, 0x26u, 0x5cu, 0x2eu, 0x4fu, 0x2au, 0x0fu, 0x44u, 0x60u, 0x3eu, 0xcbu, 0xafu, 0x05u, 0x35u,
  0x29u, 0x23u, 0xf9u, 0x23u, 0x31u, 0xf5u, 0x8fu, 0xa5u, 0x0cu, 0xe4u, 0xcau, 0xa7u, 0x60u, 0x04u, 0x10u, 0x4fu,
  0xdau, 0x85u, 0x87u, 0x92u, 0x22u, 0xbfu, 0xd5u, 0x11u, 0x29u, 0xc2u, 0x3bu, 0x35u, 0x51u, 0x7bu, 0x8du, 0xbdu,
  0x87u, 0xe1u, 0x70u, 0x6fu, 0x11u, 0x7du, 0x6cu, 0x24u, 0x1fu, 0xe9u, 0xb7u, 0xdau, 0x82u, 0x63u, 0x76u, 0xafu,
  0xe8u, 0xfcu, 0x50u, 0xc7u, 0xa9u, 0xacu, 0xcdu, 0x10u, 0xcfu, 0x26u, 0xecu, 0x81u, 0x18u, 0xc8u, 0xc6u, 0x7eu,
  0x8au, 0x86u, 0xbeu, 0xe1u, 0xa6u, 0x1fu, 0xb5u, 0xacu, 0x26u, 0x96u, 0x56u, 0xf8u, 0x8bu, 0x2du, 0x13u, 0x0au,
  0x22u, 0x5au, 0x21u, 0x16u, 0x73u, 0x3au, 0xa2u, 0xb8u, 0x5du, 0xe6u, 0x86u, 0xb9u, 0x8fu, 0x12u, 0x3eu, 0xa1u,
  0xe1u, 0x01u, 0xc2u, 0x23u, 0x2eu, 0x3fu, 0x2fu, 0x49u, 0xe9u, 0xdau, 0xf9u, 0x80u, 0x43u, 0x65u, 0x3bu, 0xe4u,
  0x61u, 0x65u, 0x50u, 0x87u, 0xd8u, 0x8au, 0x5bu, 0x4fu, 0x88u, 0x72u, 0x90u, 0x0fu, 0xe8u, 0xf9u, 0x58u, 0x17u,
  0x06u, 0x7du, 0xd5u, 0x02u, 0x24u, 0x5bu, 0xc3u, 0x4au, 0xafu, 0x72u, 0x30u, 0x5bu, 0x98u, 0x7cu, 0x18u, 0x47u,
  0x15u, 0xe3u, 0xb4u, 0x5fu, 0x94u, 0x9fu, 0x41u, 0x31u, 0x01u, 0x39u, 0x7fu, 0x40u, 0x9bu, 0xd4u, 0xd9u, 0x4bu,
};

/**
 * Initial state consisting of the decimal expansion of 1/pi
 *
 * Here, "pi" is the ratio of the diameter to the circumference.
 *
 */
constexpr std::uint8_t Draupnir::invPi[512] = {
  0x51u, 0x7cu, 0xc1u, 0xb7u, 0x27u, 0x22u, 0x0au, 0x94u, 0xfeu, 0x13u, 0xabu, 0xe8u, 0xfau, 0x9au, 0x6eu, 0xe0u,
  0x6du, 0xb1u, 0x4au, 0xccu, 0x9eu, 0x21u, 0xc8u, 0x20u, 0xffu, 0x28u, 0xb1u, 0xd5u, 0xefu, 0x5du, 0xe2u, 0xb0u,
  0xdbu, 0x92u, 0x37u, 0x1du, 0x21u, 0x26u, 0xe9u, 0x70u, 0x03u, 0x24u, 0x97u, 0x75u, 0x04u, 0xe8u, 0xc9u, 0x0eu,
  0x7fu, 0x0eu, 0xf5u, 0x8eu, 0x58u, 0x94u, 0xd3u, 0x9fu, 0x74u, 0x41u, 0x1au, 0xfau, 0x97u, 0x5du, 0xa2u, 0x42u,
  0x74u, 0xceu, 0x38u, 0x13u, 0x5au, 0x2fu, 0xbfu, 0x20u, 0x9cu, 0xc8u, 0xebu, 0x1cu, 0xc1u, 0xa9u, 0x9cu, 0xfau,
  0x4eu, 0x42u, 0x2fu, 0xc5u, 0xdeu, 0xfcu, 0x94u, 0x1du, 0x8fu, 0xfcu, 0x4bu, 0xffu, 0xefu, 0x02u, 0xccu, 0x07u,
  0xf7u, 0x97u, 0x88u, 0xc5u, 0xadu, 0x05u, 0x36u, 0x8fu, 0xb6u, 0x9bu, 0x3fu, 0x67u, 0x93u, 0xe5u, 0x84u, 0xdbu,
  0xa7u, 0xa3u, 0x1fu, 0xb3u, 0x4fu, 0x2fu, 0xf5u, 0x16u, 0xbau, 0x93u, 0xddu, 0x63u, 0xf5u, 0xf2u, 0xf8u, 0xbdu,
  0x9eu, 0x83u, 0x9cu, 0xfbu, 0xc5u, 0x29u, 0x49u, 0x75u, 0x35u, 0xfdu, 0xafu, 0xd8u, 0x8fu, 0xc6u, 0xaeu, 0x84u,
  0x2bu, 0x01u, 0x98u, 0x23u, 0x7eu, 0x3du, 0xb5u, 0xd5u, 0xf8u, 0x67u, 0xdeu, 0x10u, 0x4du, 0x7au, 0x1bu, 0x0eu,
  0xd4u, 0xf1u, 0xc8u, 0xb0u, 0xafu, 0x73u, 0x0du, 0x84u, 0x32u, 0xccu, 0xc2u, 0xafu, 0x8au, 0x50u, 0x34u, 0x20u,
  0x46u, 0xffu, 0xecu, 0x40u, 0x26u, 0xb9u, 0x93u, 0x98u, 0x83u, 0x03u, 0x0au, 0xabu, 0x65u, 0x39u, 0xd4u, 0x64u,
  0xb0u, 0x71u, 0x3du, 0xe0u, 0x46u, 0x35u, 0xa3u, 0xe2u, 0x0cu, 0xe1u, 0xb3u, 0xe6u, 0xeeu, 0x74u, 0x04u, 0x95u,
  0x41u, 0xacu, 0xe2u, 0x3bu, 0x45u, 0xcbu, 0x0eu, 0x53u, 0x6eu, 0xd7u, 0xa2u, 0x68u, 0xabu, 0x8cu, 0x82u, 0x9fu,
  0x52u, 0xffu, 0x83u, 0x82u, 0x9fu, 0xbfu, 0x19u, 0xf4u, 0x19u, 0x61u, 0x6fu, 0x27u, 0xccu, 0x19u, 0x3eu, 0xddu,
  0xe1u, 0x9eu, 0x93u, 0x77u, 0xb5u, 0x8fu, 0x2fu, 0x7cu, 0x4fu, 0x9du, 0x0fu, 0x9au, 0xe5u, 0x79u, 0x3fu, 0x8eu,
  0xc3u, 0xf8u, 0x90u, 0xc8u, 0x3eu, 0x3eu, 0x12u, 0x35u, 0x7du, 0x37u, 0x6au, 0xbbu, 0x96u, 0x98u, 0x21u, 0x9du,
  0x8au, 0xe3u, 0x0au, 0x5au, 0xceu, 0x8cu, 0xe1u, 0xe1u, 0x62u, 0x56u, 0xa0u, 0xa6u, 0x96u, 0x2eu, 0x80u, 0x06u,
  0x23u, 0x3eu, 0xc3u, 0x16u, 0xb8u, 0xf1u, 0xcdu, 0x63u, 0x4du, 0x80u, 0x31u, 0x19u, 0xbeu, 0x69u, 0x5au, 0x4bu,
  0xd3u, 0xdau, 0x6au, 0xaau, 0x9bu, 0xfbu, 0x1fu, 0x6bu, 0x8cu, 0x08u, 0x51u, 0xfeu, 0x3bu, 0x26u, 0x95u, 0x4eu,
  0xb2u, 0x55u, 0xebu, 0xb8u, 0x7cu, 0x3eu, 0x31u, 0xabu, 0xd8u, 0x3du, 0x73u, 0x8au, 0x8bu, 0xabu, 0x24u, 0xe0u,
  0x6cu, 0xebu, 0x1du, 0x9cu, 0x42u, 0x53u, 0xe5u, 0x91u, 0x92u, 0x3bu, 0xc5u, 0x6bu, 0x11u, 0xaau, 0x2du, 0x5cu,
  0x8fu, 0x80u, 0x0du, 0x85u, 0x78u, 0xefu, 0xe7u, 0x0cu, 0xffu, 0x98u, 0xcfu, 0xb5u, 0x0fu, 0x33u, 0x30u, 0xabu,
  0xccu, 0xa3u, 0xfdu, 0xd6u, 0x6cu, 0x3fu, 0xbfu, 0x5bu, 0xb2u, 0x91u, 0x44u, 0xf4u, 0x19u, 0x30u, 0x5fu, 0xf3u,
  0x66u, 0xe2u, 0x77u, 0x84u, 0x9bu, 0x36u, 0x6au, 0x1fu, 0xaeu, 0xebu, 0xefu, 0x0bu, 0x6fu, 0x1du, 0xacu, 0x49u,
  0x4du, 0xefu, 0x14u, 0x11u, 0x69u, 0x74u, 0x43u, 0x14u, 0x26u, 0xacu, 0x71u, 0x19u, 0x65u, 0x63u, 0x0bu, 0x71u,
  0x84u, 0x65u, 0xbeu, 0xf0u, 0x28u, 0x60u, 0x0bu, 0xd3u, 0x8eu, 0xf9u, 0xadu, 0xf0u, 0x0cu, 0x1au, 0x09u, 0x97u,
  0x31u, 0x09u, 0x41u, 0x80u, 0xa4u, 0x41u, 0xadu, 0xc7u, 0x7au, 0xbfu, 0xd8u, 0x56u, 0xf9u, 0x74u, 0x8fu, 0x21u,
  0xa5u, 0x24u, 0x69u, 0xb3u, 0x88u, 0x6cu, 0x6eu, 0xd5u, 0x21u, 0x2fu, 0xd7u, 0x67u, 0x30u, 0xb5u, 0x52u, 0x14u,
  0x05u, 0x5au, 0x4cu, 0xe9u, 0xf9u, 0x53u, 0x03u, 0x3fu, 0xbbu, 0xaeu, 0x41u, 0xe1u, 0x51u, 0xc4u, 0x1eu, 0x30u,
  0xbcu, 0x39u, 0xc5u, 0x2du, 0x46u, 0x57u, 0xdeu, 0xebu, 0xb7u, 0xb1u, 0xd3u, 0x16u, 0xe5u, 0xdfu, 0xfau, 0x77u,
  0xc0u, 0xc6u, 0xb3u, 0xe0u, 0x93u, 0x22u, 0xe5u, 0x2au, 0x9bu, 0x6cu, 0xe5u, 0x69u, 0x54u, 0x14u, 0x46u, 0xb0u,
};

/**
 * Initial state consisting of the decimal expansion of 1/gamma
 *
 * Here, "gamma" is the Euler-Mascheroni constant.
 *
 */
constexpr std::uint8_t Draupnir::invGamma[512] = {
  0xbbu, 0x82u, 0x26u, 0xf5u, 0x02u, 0xbfu, 0x7eu, 0x85u, 0x41u, 0x38u, 0xc6u, 0xd9u, 0x97u, 0x8au, 0xb8u, 0x9du,
  0xe2u, 0x8cu, 0x16u, 0x59u, 0xbau, 0x47u, 0x8au, 0xf9u, 0x78u, 0xffu, 0x0cu, 0x91u, 0x8bu, 0xebu, 0xd0u, 0x2fu,
  0x58u, 0x1eu, 0xcfu, 0x1cu, 0xeeu, 0xbbu, 0xbcu, 0x14u, 0xe2u, 0x75u, 0xb6u, 0x4cu, 0x09u, 0x2cu, 0x09u, 0x10u,
  0x5au, 0xf0u, 0x17u, 0x4cu, 0x81u, 0x5eu, 0x7eu, 0xb2u, 0xcbu, 0xe9u, 0x61u, 0xcfu, 0x67u, 0x45u, 0x80u, 0xe4u,
  0x7fu, 0xd7u, 0xc5u, 0xceu, 0xa2u, 0x74u, 0xe6u, 0x0bu, 0xc6u, 0x01u, 0xc6u, 0x3au, 0xd9u, 0x9bu, 0x08u, 0x77u,
  0x03u, 0x28u, 0x7bu, 0xa3u, 0x1du, 0xd4u, 0x4bu, 0x46u, 0x20u, 0x49u, 0x5cu, 0x89u, 0xecu, 0xecu, 0x74u, 0xb2u,
  0x1bu, 0x3fu, 0x24u, 0x9du, 0xecu, 0xb7u, 0x66u, 0x91u, 0x2cu, 0x7cu, 0x6bu, 0x86u, 0xa5u, 0x20u, 0x9fu, 0xf9u,
  0xcau, 0xf2u, 0x20u, 0xd5u, 0xd1u, 0x34u, 0xd6u, 0x60u, 0xbbu, 0xe0u, 0x0fu, 0x2fu, 0x34u, 0xebu, 0xd8u, 0x50u,
  0xf4u, 0xd8u, 0x17u, 0x81u, 0xbeu, 0x17u, 0x24u, 0xa2u, 0xc2u, 0xacu, 0x12u, 0x55u, 0x12u, 0x1au, 0x88u, 0x1du,
  0xc4u, 0x54u, 0xc1u, 0xffu, 0x00u, 0xbau, 0xf1u, 0xd6u, 0x5du, 0x46u, 0xe0u, 0xb6u, 0x97u, 0x5au, 0xc4u, 0xbdu,
  0x00u, 0x75u, 0x1cu, 0x86u, 0x39u, 0xc7u, 0xfcu, 0x4du, 0x4bu, 0xf6u, 0xccu, 0xdau, 0x1bu, 0x45u, 0x29u, 0xecu,
  0x5eu, 0x58u, 0x55u, 0xecu, 0x4au, 0xd0u, 0xc8u, 0x1eu, 0xc4u, 0x92u, 0x1du, 0x1cu, 0x65u, 0x9du, 0x11u, 0x09u,
  0x4bu, 0x3cu, 0xefu, 0x06u, 0xa7u, 0xf6u, 0x42u, 0xe7u, 0x19u, 0xe0u, 0xe1u, 0x7eu, 0x56u, 0x40u, 0xbdu, 0x17u,
  0xd8u, 0x9bu, 0xf1u, 0xc5u, 0x38u, 0xaau, 0xd2u, 0xe0u, 0x55u, 0x8fu, 0xaau, 0xc4u, 0x20u, 0x9bu, 0x93u, 0x73u,
  0x3cu, 0x4cu, 0xa8u, 0xaeu, 0x58u, 0x03u, 0xe4u, 0x90u, 0x2eu, 0x5fu, 0xccu, 0x8cu, 0xf5u, 0x9au, 0x71u, 0x71u,
  0xb4u, 0xf0u, 0x32u, 0x49u, 0x7au, 0x5bu, 0xf6u, 0x8au, 0x3eu, 0x21u, 0x20u, 0x4du, 0x25u, 0xdbu, 0xc8u, 0x3cu,
  0x72u, 0xa0u, 0xb7u, 0x54u, 0x58u, 0xc0u, 0x3cu, 0x6bu, 0xeau, 0x61u, 0x38u, 0x73u, 0xa2u, 0xfau, 0x4eu, 0x39u,
  0x6au, 0xa7u, 0xcdu, 0x02u, 0x2eu, 0x29u, 0xc3u, 0xf9u, 0x1cu, 0x01u, 0xa2u, 0xc2u, 0x9du, 0x1eu, 0x96u, 0x85u,
  0x4cu, 0xe3u, 0x3fu, 0x2au, 0x48u, 0x62u, 0xefu, 0xcfu, 0x51u, 0x0au, 0xa6u, 0x79u, 0xedu, 0x0eu, 0x26u, 0x89u,
  0x44u, 0xbdu, 0x95u, 0x4bu, 0x52u, 0x57u, 0xe0u, 0xa3u, 0xe7u, 0x21u, 0x8eu, 0xfau, 0x36u, 0xd6u, 0xd9u, 0x61u,
  0xd6u, 0xf4u, 0x30u, 0xf0u, 0xfcu, 0xc5u, 0x74u, 0xfcu, 0x4cu, 0x3cu, 0x93u, 0x1au, 0x76u, 0x2au, 0xdfu, 0x92u,
  0xd6u, 0x86u, 0x27u, 0xb3u, 0x15u, 0x74u, 0x9fu, 0xe1u, 0x41u, 0x00u, 0x53u, 0xabu, 0x85u, 0x9au, 0x27u, 0x8du,
  0x40u, 0x75u, 0x60u, 0x6du, 0xc7u, 0x80u, 0x3au, 0x33u, 0xd5u, 0xabu, 0xd6u, 0xf3u, 0xc9u, 0x92u, 0xf5u, 0x07u,
  0x15u, 0xecu, 0x13u, 0x82u, 0x17u, 0x7fu, 0xa1u, 0x2cu, 0x02u, 0xc2u, 0x2du, 0x81u, 0xd5u, 0xd8u, 0x48u, 0xa9u,
  0x6bu, 0x5fu, 0x9du, 0x87u, 0x5eu, 0x92u, 0x98u, 0x1au, 0x0au, 0x54u, 0xd3u, 0x1fu, 0xeau, 0xbdu, 0xcbu, 0x94u,
  0x5fu, 0xfdu, 0xccu, 0x86u, 0x8cu, 0x1fu, 0xaau, 0x2cu, 0x9eu, 0x98u, 0xc7u, 0x5cu, 0x46u, 0x56u, 0x0au, 0xa5u,
  0x04u, 0x03u, 0x5fu, 0x76u, 0xf4u, 0x81u, 0x70u, 0x91u, 0x1fu, 0x10u, 0x78u, 0xa7u, 0xdeu, 0x52u, 0x55u, 0x44u,
  0xa1u, 0x3cu, 0x96u, 0xfau, 0x57u, 0xd9u, 0x4cu, 0xb7u, 0xd1u, 0xa4u, 0x2fu, 0x9cu, 0x76u, 0xf0u, 0x1du, 0x12u,
  0x53u, 0x5du, 0x96u, 0x29u, 0xf5u, 0x5bu, 0x0bu, 0xd1u, 0x2du, 0xa0u, 0xc2u, 0x0fu, 0x79u, 0xcbu, 0x87u, 0xf5u,
  0x66u, 0x2fu, 0x3au, 0x15u, 0x33u, 0x03u, 0xc8u, 0xf7u, 0xf8u, 0x72u, 0x2eu, 0x92u, 0xfbu, 0xc2u, 0xb0u, 0xfcu,
  0xdfu, 0x22u, 0x2au, 0x11u, 0xb5u, 0x5eu, 0x03u, 0xf6u, 0x8fu, 0x23u, 0x2bu, 0x9au, 0x5au, 0xeau, 0xdeu, 0xafu,
  0x6bu, 0x8cu, 0xa2u, 0x53u, 0x4bu, 0x33u, 0x7fu, 0x46u, 0x5du, 0xd5u, 0x2au, 0x71u, 0x0au, 0xcdu, 0xb0u, 0x8eu,
};

/**
 * Initial state consisting of the decimal expansion of 1/omega
 *
 * Here, "gamma" is W(1), where "W" is Lambert's W function.
 *
 */
constexpr std::uint8_t Draupnir::invOmega[512] = {
  0xc3u, 0x62u, 0x92u, 0x59u, 0x1au, 0x10u, 0xfdu, 0x17u, 0x23u, 0x2eu, 0x7bu, 0x33u, 0x53u, 0x58u, 0x18u, 0x78u,
  0x30u, 0x07u, 0x3cu, 0x0cu, 0x12u, 0x54u, 0x73u, 0x8du, 0x20u, 0x74u, 0xe1u, 0xbcu, 0xeau, 0xf1u, 0xecu, 0x32u,
  0x70u, 0x63u, 0xa9u, 0xf0u, 0x48u, 0x14u, 0x9du, 0xc8u, 0xccu, 0x54u, 0xd5u, 0x00u, 0x71u, 0xfau, 0xfeu, 0x46u,
  0xc8u, 0xeau, 0x3au, 0x3eu, 0x36u, 0xd0u, 0x28u, 0x83u, 0x24u, 0xa4u, 0xb8u, 0x84u, 0x5au, 0xa4u, 0x29u, 0x72u,
  0x71u, 0x3bu, 0xabu, 0xbbu, 0x2fu, 0xebu, 0x46u, 0x0eu, 0xe3u, 0x34u, 0x60u, 0xfcu, 0x2fu, 0x0du, 0x0fu, 0xacu,
  0x2bu, 0xf9u, 0x20u, 0xa3u, 0xa3u, 0xd5u, 0xf5u, 0xdfu, 0xf8u, 0xabu, 0x7du, 0x7fu, 0x1fu, 0x85u, 0x24u, 0x5bu,
  0x8cu, 0x0bu, 0xa7u, 0x45u, 0x2au, 0x9au, 0xacu, 0xdeu, 0xccu, 0xabu, 0x57u, 0xccu, 0x61u, 0xa1u, 0x48u, 0xb3u,
  0x8cu, 0xf4u, 0xd5u, 0xc2u, 0xc4u, 0xe7u, 0xcdu, 0xc6u, 0x23u, 0xcau, 0x4eu, 0xd1u, 0xbdu, 0x90u, 0xc1u, 0xf5u,
  0xa1u, 0x6au, 0x56u, 0x60u, 0x87u, 0xdau, 0xabu, 0x49u, 0xdau, 0xa2u, 0x8bu, 0x58u, 0x0bu, 0x82u, 0xd2u, 0x75u,
  0xf3u, 0xfdu, 0xeeu, 0x51u, 0x52u, 0x4au, 0x39u, 0x19u, 0x4cu, 0x87u, 0x1au, 0xd8u, 0x50u, 0xf3u, 0xc7u, 0x9fu,
  0x32u, 0x07u, 0xc4u, 0xc8u, 0xd5u, 0x17u, 0x76u, 0x95u, 0xc8u, 0x03u, 0x55u, 0xdau, 0x43u, 0xc4u, 0x6du, 0xbbu,
  0x4fu, 0x46u, 0x23u, 0x16u, 0x95u, 0xebu, 0x1fu, 0x25u, 0x40u, 0x60u, 0x2fu, 0xa0u, 0xf3u, 0xc9u, 0xb5u, 0xe6u,
  0x6eu, 0x14u, 0xfcu, 0xb1u, 0x58u, 0x8fu, 0xf7u, 0x20u, 0xd1u, 0x67u, 0x60u, 0x28u, 0x68u, 0x69u, 0x26u, 0x08u,
  0x83u, 0x2cu, 0xe5u, 0xf1u, 0x2du, 0x3fu, 0xdbu, 0x60u, 0x21u, 0x67u, 0xafu, 0x5fu, 0x21u, 0xeeu, 0xddu, 0xb1u,
  0x15u, 0x35u, 0xb7u, 0xe1u, 0x75u, 0x08u, 0xc5u, 0xb5u, 0xd4u, 0x68u, 0x09u, 0x89u, 0x4au, 0x5cu, 0xc8u, 0x73u,
  0xc5u, 0x1eu, 0xa5u, 0xa1u, 0x4au, 0xd8u, 0xd9u, 0x5cu, 0x6eu, 0x09u, 0x30u, 0xe2u, 0x28u, 0x55u, 0xdcu, 0x74u,
  0xa3u, 0x11u, 0x44u, 0x3fu, 0xdfu, 0xdeu, 0x55u, 0x35u, 0x92u, 0x85u, 0xe7u, 0x69u, 0x03u, 0x22u, 0x96u, 0x4au,
  0xcau, 0x78u, 0x4du, 0x12u, 0x00u, 0x75u, 0x42u, 0x97u, 0xecu, 0xafu, 0xdeu, 0x9au, 0xa2u, 0xe3u, 0x5bu, 0x3au,
  0x00u, 0xf7u, 0xa5u, 0x7eu, 0x1fu, 0x22u, 0xa5u, 0xe4u, 0x30u, 0x7cu, 0xccu, 0x20u, 0xc1u, 0xceu, 0x63u, 0xe6u,
  0x05u, 0x61u, 0x34u, 0xd3u, 0xe6u, 0x4cu, 0xa3u, 0x59u, 0x91u, 0xa0u, 0x77u, 0xd5u, 0x3du, 0x06u, 0xe2u, 0xa3u,
  0x61u, 0x03u, 0xc5u, 0xefu, 0xa3u, 0xc6u, 0x61u, 0x57u, 0xc6u, 0x2fu, 0x0cu, 0x50u, 0x40u, 0x1au, 0x8eu, 0xbau,
  0xc3u, 0x46u, 0xdcu, 0x5cu, 0x35u, 0xe4u, 0x6eu, 0x06u, 0x0fu, 0x73u, 0xf9u, 0xbfu, 0x6fu, 0x02u, 0xf5u, 0x4eu,
  0x41u, 0xeeu, 0x86u, 0x07u, 0x8fu, 0x06u, 0xb6u, 0xb6u, 0x82u, 0x39u, 0x57u, 0xf2u, 0x63u, 0x31u, 0xaeu, 0xfbu,
  0x37u, 0x01u, 0xc7u, 0x17u, 0xadu, 0xd9u, 0xd1u, 0x09u, 0x2bu, 0x8bu, 0xcdu, 0x18u, 0x35u, 0xcdu, 0x2du, 0xfau,
  0x85u, 0x43u, 0xa8u, 0x67u, 0xd6u, 0x87u, 0xf2u, 0xefu, 0xfeu, 0x6eu, 0xc8u, 0xd0u, 0x9cu, 0x6cu, 0x1du, 0xc4u,
  0xeeu, 0xc3u, 0xa0u, 0x29u, 0x5du, 0xfcu, 0x53u, 0x85u, 0x9du, 0x20u, 0xd9u, 0x88u, 0x51u, 0x05u, 0x00u, 0xffu,
  0x0du, 0x2fu, 0xaau, 0x46u, 0x79u, 0x9fu, 0xe9u, 0x42u, 0x8au, 0x9du, 0xadu, 0x45u, 0x82u, 0xaau, 0xc6u, 0xd7u,
  0x6au, 0x22u, 0x12u, 0x06u, 0xfeu, 0x04u, 0x0au, 0x23u, 0xa8u, 0x07u, 0x7cu, 0xd7u, 0x75u, 0x52u, 0xa3u, 0xd9u,
  0x31u, 0x53u, 0x2bu, 0x79u, 0x02u, 0xf0u, 0x09u, 0x91u, 0xfcu, 0x92u, 0x77u, 0x8fu, 0x7eu, 0x17u, 0x49u, 0x24u,
  0xfeu, 0xcdu, 0xd0u, 0xebu, 0xc8u, 0xdbu, 0x1du, 0x6bu, 0x4fu, 0x12u, 0xf1u, 0x76u, 0xaeu, 0xa6u, 0xd5u, 0x32u,
  0xc8u, 0x4fu, 0xf7u, 0x46u, 0x6cu, 0x88u, 0x08u, 0x37u, 0x37u, 0x4bu, 0x37u, 0x8eu, 0x66u, 0x32u, 0x4fu, 0xecu,
  0x5cu, 0x19u, 0x08u, 0x96u, 0xf0u, 0xc0u, 0x70u, 0x72u, 0xbau, 0x07u, 0xf0u, 0x63u, 0xa0u, 0xd5u, 0x2du, 0x08u,
};

/**
 * Initial state consisting of the decimal expansion of sqrt(2)
 *
 */
constexpr std::uint8_t Draupnir::sqrt2[512] = {
  0x6au, 0x09u, 0xe6u, 0x67u, 0xf3u, 0xbcu, 0xc9u, 0x08u, 0xb2u, 0xfbu, 0x13u, 0x66u, 0xeau, 0x95u, 0x7du, 0x3eu,
  0x3au, 0xdeu, 0xc1u, 0x75u, 0x12u, 0x77u, 0x50u, 0x99u, 0xdau, 0x2fu, 0x59u, 0x0bu, 0x06u, 0x67u, 0x32u, 0x2au,
  0x95u, 0xf9u, 0x06u, 0x08u, 0x75u, 0x71u, 0x45u, 0x87u, 0x51u, 0x63u, 0xfcu, 0xdfu, 0xb9u, 0x07u, 0xb6u, 0x72u,
  0x1eu, 0xe9u, 0x50u, 0xbcu, 0x87u, 0x38u, 0xf6u, 0x94u, 0xf0u, 0x09u, 0x0eu, 0x6cu, 0x7bu, 0xf4u, 0x4eu, 0xd1u,
  0xa4u, 0x40u, 0x5du, 0x0eu, 0x85u, 0x5eu, 0x3eu, 0x9cu, 0xa6u, 0x0bu, 0x38u, 0xc0u, 0x23u, 0x78u, 0x66u, 0xf7u,
  0x95u, 0x63u, 0x79u, 0x22u, 0x2du, 0x10u, 0x8bu, 0x14u, 0x8cu, 0x15u, 0x78u, 0xe4u, 0x5eu, 0xf8u, 0x9cu, 0x67u,
  0x8du, 0xabu, 0x51u, 0x47u, 0x17u, 0x6fu, 0xd3u, 0xb9u, 0x96u, 0x54u, 0xc6u, 0x86u, 0x63u, 0xe7u, 0x90u, 0x9bu,
  0xeau, 0x5eu, 0x24u, 0x1fu, 0x06u, 0xdcu, 0xb0u, 0x5du, 0xd5u, 0x49u, 0x41u, 0x13u, 0x20u, 0x81u, 0x94u, 0x95u,
  0x02u, 0x72u, 0x95u, 0x6du, 0xb1u, 0xfau, 0x1du, 0xfbu, 0xe9u, 0xa7u, 0x40u, 0x59u, 0xd7u, 0x92u, 0x7cu, 0x18u,
  0x84u, 0xc9u, 0xb5u, 0x79u, 0xaau, 0x51u, 0x6cu, 0xa3u, 0x71u, 0x9eu, 0x68u, 0x36u, 0xdfu, 0x04u, 0x6du, 0x8eu,
  0x02u, 0x09u, 0xb8u, 0x03u, 0xfcu, 0x64u, 0x6au, 0x5eu, 0x66u, 0x54u, 0xbdu, 0x3eu, 0xf7u, 0xb4u, 0x3du, 0x7fu,
  0xedu, 0x43u, 0x7cu, 0x7fu, 0x94u, 0x44u, 0x26u, 0x0fu, 0xbdu, 0x40u, 0xc4u, 0x83u, 0xefu, 0x55u, 0x03u, 0x85u,
  0x83u, 0xf9u, 0x7bu, 0xbdu, 0x45u, 0xefu, 0xb8u, 0x66u, 0x31u, 0x07u, 0x14u, 0x5du, 0x5fu, 0xebu, 0xe7u, 0x65u,
  0xa4u, 0x9eu, 0x94u, 0xecu, 0x7fu, 0x59u, 0x71u, 0x05u, 0xfbu, 0xfcu, 0x2eu, 0x1fu, 0xa7u, 0x63u, 0xefu, 0x01u,
  0xf3u, 0x59u, 0x9cu, 0x82u, 0xf2u, 0xfeu, 0x50u, 0x0bu, 0x84u, 0x8cu, 0xf0u, 0xbdu, 0x25u, 0x2au, 0xe0u, 0x46u,
  0xbfu, 0x9fu, 0x1eu, 0xf7u, 0x94u, 0x7du, 0x46u, 0x76u, 0x9au, 0xf8u, 0xc1u, 0x4bu, 0xccu, 0x67u, 0xc7u, 0xc2u,
  0x90u, 0xbeu, 0x76u, 0x92u, 0x9bu, 0x05u, 0x78u, 0xc1u, 0x0bu, 0x58u, 0x4fu, 0xb4u, 0x87u, 0xc9u, 0x24u, 0xf5u,
  0xb7u, 0x1fu, 0x82u, 0xdcu, 0xd2u, 0x90u, 0x36u, 0x09u, 0xdeu, 0xe8u, 0x91u, 0x29u, 0x83u, 0xd4u, 0xeau, 0xadu,
  0x0eu, 0xeau, 0x32u, 0x1fu, 0x74u, 0x89u, 0xf4u, 0x6au, 0x7eu, 0x90u, 0x30u, 0xbeu, 0x20u, 0xfbu, 0x76u, 0x94u,
  0xefu, 0xb5u, 0x8cu, 0x99u, 0x84u, 0xcdu, 0xd7u, 0x0au, 0x1du, 0xa9u, 0x04u, 0x5cu, 0x3du, 0x13u, 0x3au, 0x06u,
  0x84u, 0x23u, 0xd6u, 0xe3u, 0x83u, 0x03u, 0xd9u, 0x01u, 0xbau, 0x9du, 0xa3u, 0x47u, 0x66u, 0x84u, 0x79u, 0x6cu,
  0x5cu, 0xd5u, 0x97u, 0x2du, 0xc0u, 0xffu, 0x35u, 0x40u, 0xc3u, 0x41u, 0x29u, 0x42u, 0xd6u, 0x40u, 0x61u, 0x01u,
  0xefu, 0x6fu, 0xc6u, 0xdeu, 0x91u, 0x14u, 0xa2u, 0xb4u, 0xf2u, 0x48u, 0xc6u, 0x89u, 0xc6u, 0x00u, 0xbbu, 0x40u,
  0xa8u, 0xb5u, 0x6bu, 0x04u, 0x1fu, 0xd5u, 0xdeu, 0x6eu, 0x0du, 0xd0u, 0xc6u, 0x6du, 0x48u, 0x31u, 0xfeu, 0x7fu,
  0xffu, 0x57u, 0x57u, 0xe4u, 0x71u, 0x09u, 0x80u, 0xcdu, 0xbdu, 0x5cu, 0x26u, 0x84u, 0x85u, 0xdau, 0x5eu, 0x91u,
  0xb3u, 0xe2u, 0xf2u, 0x05u, 0xb7u, 0x27u, 0x25u, 0xb9u, 0x71u, 0xd6u, 0x0au, 0x1fu, 0x88u, 0x8fu, 0x08u, 0xa0u,
  0xa6u, 0xe1u, 0x00u, 0xccu, 0xedu, 0xc2u, 0xceu, 0x5bu, 0xd9u, 0x8au, 0xeeu, 0x71u, 0xe4u, 0x2eu, 0x26u, 0x8du,
  0x37u, 0xa6u, 0x07u, 0x2fu, 0x22u, 0x02u, 0x34u, 0x61u, 0x3fu, 0xfcu, 0x22u, 0x45u, 0x34u, 0x39u, 0xeau, 0x97u,
  0xa9u, 0x99u, 0xb6u, 0xc9u, 0xe3u, 0xceu, 0x71u, 0xf9u, 0x4du, 0x60u, 0x92u, 0xacu, 0xe1u, 0x20u, 0xabu, 0x8eu,
  0x55u, 0x0eu, 0x0du, 0x55u, 0x11u, 0x68u, 0x86u, 0x31u, 0x77u, 0x8cu, 0xf6u, 0x03u, 0x50u, 0xd0u, 0x2fu, 0xe8u,
  0x5fu, 0x29u, 0xecu, 0x8bu, 0xe5u, 0xc7u, 0x2bu, 0x80u, 0x7au, 0xf5u, 0x77u, 0x1bu, 0x82u, 0x5bu, 0x30u, 0xa0u,
  0xe7u, 0x83u, 0x76u, 0xa9u, 0x1cu, 0x08u, 0xc6u, 0xa7u, 0xf0u, 0xf8u, 0xf3u, 0x23u, 0xb3u, 0x62u, 0x81u, 0xd2u,
};

/**
 * Initial state consisting of the decimal expansion of sqrt(3)
 *
 */
constexpr std::uint8_t Draupnir::sqrt3[512] = {
  0xbbu, 0x67u, 0xaeu, 0x85u, 0x84u, 0xcau, 0xa7u, 0x3bu, 0x25u, 0x74u, 0x2du, 0x70u, 0x78u, 0xb8u, 0x3bu, 0x89u,
  0x25u, 0xd8u, 0x34u, 0xccu, 0x53u, 0xdau, 0x47u, 0x98u, 0xc7u, 0x20u, 0xa6u, 0x48u, 0x6eu, 0x45u, 0xa6u, 0xe2u,
  0x49u, 0x0bu, 0xcfu, 0xd9u, 0x5eu, 0xf1u, 0x5du, 0xbdu, 0xa9u, 0x93u, 0x0au, 0xaeu, 0x12u, 0x22u, 0x8fu, 0x87u,
  0xccu, 0x4cu, 0xf2u, 0x4du, 0xa3u, 0xa1u, 0xecu, 0x68u, 0xd0u, 0xcdu, 0x33u, 0xa0u, 0x1au, 0xd9u, 0xa3u, 0x83u,
  0xb9u, 0xe1u, 0x22u, 0xe6u, 0x13u, 0x8cu, 0x3au, 0xe6u, 0xdeu, 0x5eu, 0xdeu, 0x3bu, 0xd4u, 0x2du, 0xb7u, 0x30u,
  0x1bu, 0x6bu, 0xf5u, 0x53u, 0xafu, 0x7bu, 0x09u, 0xfdu, 0x6eu, 0xbeu, 0xf3u, 0x3au, 0x9au, 0x9fu, 0xe5u, 0x77u,
  0x29u, 0x42u, 0x6fu, 0x30u, 0xe5u, 0x89u, 0x2au, 0xb5u, 0x72u, 0x81u, 0x6cu, 0xceu, 0xfcu, 0x58u, 0x99u, 0x35u,
  0x5fu, 0x7fu, 0x11u, 0xc3u, 0xe2u, 0x4fu, 0x37u, 0x68u, 0xa5u, 0xc7u, 0xcbu, 0x90u, 0xd5u, 0x53u, 0x02u, 0x50u,
  0x5du, 0xf0u, 0x14u, 0xc7u, 0x0au, 0xdbu, 0x1eu, 0xc1u, 0xbau, 0xf5u, 0x8fu, 0x08u, 0x44u, 0x33u, 0xc0u, 0xd5u,
  0x66u, 0x96u, 0xa0u, 0x39u, 0xd9u, 0x62u, 0xd8u, 0x43u, 0x41u, 0x94u, 0xaau, 0xb1u, 0x64u, 0xd6u, 0x42u, 0xf7u,
  0x6eu, 0x2cu, 0x8fu, 0x7du, 0xbeu, 0xd6u, 0x4bu, 0x39u, 0xdau, 0xd2u, 0xf9u, 0xf7u, 0x72u, 0x6cu, 0x69u, 0x30u,
  0xc4u, 0x9du, 0x48u, 0xffu, 0xcdu, 0xc2u, 0x11u, 0x14u, 0xa6u, 0xc3u, 0x6bu, 0x2au, 0xb7u, 0x01u, 0x8au, 0xf6u,
  0x5cu, 0x10u, 0xf8u, 0x06u, 0xa8u, 0xfcu, 0xf4u, 0x18u, 0x8eu, 0xf3u, 0x77u, 0xd2u, 0xd5u, 0xb5u, 0xfdu, 0x19u,
  0x42u, 0xe6u, 0xfdu, 0x41u, 0xf9u, 0xd2u, 0x3bu, 0x66u, 0x78u, 0x13u, 0xdfu, 0x42u, 0x0bu, 0x68u, 0xd3u, 0x13u,
  0xb3u, 0x87u, 0xaeu, 0x00u, 0xd7u, 0xa1u, 0xddu, 0xd4u, 0x0au, 0xa6u, 0x9bu, 0xb5u, 0x35u, 0x2du, 0x35u, 0x22u,
  0x52u, 0x9au, 0x72u, 0x69u, 0xafu, 0x1au, 0xceu, 0x62u, 0xc8u, 0x32u, 0x5cu, 0xedu, 0x0du, 0x18u, 0xc2u, 0x46u,
  0x35u, 0xd6u, 0x61u, 0xcfu, 0xb4u, 0x68u, 0xbeu, 0x1bu, 0x09u, 0x6fu, 0xe6u, 0x77u, 0xa7u, 0x87u, 0x56u, 0xffu,
  0x46u, 0xb5u, 0x50u, 0x6du, 0x20u, 0x2bu, 0xbau, 0xb5u, 0xe3u, 0x35u, 0x13u, 0x51u, 0x77u, 0x60u, 0x80u, 0xe7u,
  0x51u, 0xe7u, 0xa6u, 0xedu, 0x2eu, 0xcbu, 0xd5u, 0xcau, 0xb0u, 0x34u, 0x3fu, 0x67u, 0x7bu, 0xc2u, 0xf4u, 0xd3u,
  0x02u, 0x0bu, 0x12u, 0xc5u, 0xa3u, 0xddu, 0x54u, 0x17u, 0x05u, 0x14u, 0xf1u, 0xd9u, 0x10u, 0xc6u, 0x4au, 0x78u,
  0x6du, 0x9fu, 0x4fu, 0xddu, 0xe3u, 0x06u, 0xdfu, 0xceu, 0x0du, 0xe8u, 0x46u, 0x6bu, 0x0cu, 0x0bu, 0x10u, 0x97u,
  0x80u, 0x13u, 0x48u, 0xa9u, 0x49u, 0x7au, 0xcau, 0x75u, 0xbdu, 0xd1u, 0xb2u, 0xcbu, 0x8au, 0x04u, 0x23u, 0x30u,
  0xfbu, 0x4au, 0x53u, 0xf0u, 0x2fu, 0xbeu, 0x02u, 0xb0u, 0xbdu, 0x65u, 0xb3u, 0x82u, 0xe5u, 0x38u, 0x77u, 0xc9u,
  0xb3u, 0xb5u, 0x18u, 0xf8u, 0x37u, 0xf0u, 0x9bu, 0x9eu, 0xa3u, 0xeau, 0xdau, 0x4du, 0xe7u, 0x74u, 0x74u, 0x4cu,
  0x66u, 0x7eu, 0xe7u, 0x78u, 0xa7u, 0xdeu, 0x21u, 0x00u, 0xefu, 0x38u, 0x47u, 0x57u, 0x3du, 0x88u, 0xbfu, 0x59u,
  0x37u, 0x79u, 0xafu, 0x61u, 0xa4u, 0x46u, 0xd5u, 0xcfu, 0x76u, 0xc3u, 0x9eu, 0x9bu, 0x5eu, 0x3au, 0x8eu, 0x82u,
  0xeau, 0xdbu, 0x3bu, 0xabu, 0x8bu, 0xbeu, 0xd5u, 0x73u, 0xc8u, 0x23u, 0x32u, 0xc9u, 0xb6u, 0x92u, 0xadu, 0x88u,
  0x92u, 0x63u, 0x93u, 0x68u, 0x7cu, 0x4cu, 0xfdu, 0x26u, 0x8bu, 0xf8u, 0xc1u, 0x1fu, 0x4fu, 0x39u, 0x49u, 0x03u,
  0x81u, 0x60u, 0x10u, 0x41u, 0x4cu, 0x23u, 0x1du, 0x5au, 0xb4u, 0xe9u, 0x54u, 0xccu, 0xa3u, 0x51u, 0xa0u, 0xb9u,
  0x7bu, 0x9cu, 0x1du, 0xfcu, 0x9cu, 0x26u, 0x3bu, 0xc1u, 0x8fu, 0xe1u, 0xb0u, 0x89u, 0x9eu, 0xfau, 0xe7u, 0xdcu,
  0x41u, 0xd6u, 0x3fu, 0xa0u, 0xd2u, 0x9au, 0x5eu, 0x5du, 0x54u, 0x1fu, 0x52u, 0x61u, 0x7au, 0xb4u, 0x67u, 0x1cu,
  0xdeu, 0xd7u, 0x59u, 0x43u, 0x6eu, 0x30u, 0xdau, 0x23u, 0x44u, 0x91u, 0xb1u, 0x92u, 0xdcu, 0x6du, 0x19u, 0x0fu,
};

/**
 * Initial state consisting of the decimal expansion of sqrt(5)
 *
 */
constexpr std::uint8_t Draupnir::sqrt5[512] = {
  0x3cu, 0x6eu, 0xf3u, 0x72u, 0xfeu, 0x94u, 0xf8u, 0x2bu, 0xe7u, 0x39u, 0x80u, 0xc0u, 0xb9u, 0xdbu, 0x90u, 0x68u,
  0x21u, 0x04u, 0x4eu, 0xd7u, 0xe7u, 0x44u, 0xe4u, 0xa3u, 0xf0u, 0xd8u, 0xd4u, 0x23u, 0xa1u, 0x83u, 0x1du, 0x2au,
  0x4eu, 0xcfu, 0xe1u, 0x62u, 0xa7u, 0xa4u, 0xf6u, 0xfeu, 0x06u, 0x8eu, 0x08u, 0xb6u, 0xb7u, 0xe3u, 0x04u, 0xfeu,
  0x03u, 0x10u, 0xdeu, 0x12u, 0x50u, 0x80u, 0x60u, 0x05u, 0x83u, 0xacu, 0x97u, 0x48u, 0x1eu, 0x66u, 0xbcu, 0x6du,
  0xe0u, 0xd5u, 0xafu, 0x5du, 0x2eu, 0x2fu, 0x0eu, 0xfdu, 0x0bu, 0x07u, 0x3au, 0xddu, 0xffu, 0x7au, 0xfbu, 0x8cu,
  0xc9u, 0xa6u, 0x4bu, 0xa3u, 0x8au, 0x6eu, 0x2du, 0x05u, 0x95u, 0xbau, 0x19u, 0x99u, 0xfbu, 0xffu, 0x77u, 0xc2u,
  0xc4u, 0xdcu, 0x67u, 0x71u, 0xa0u, 0x96u, 0x86u, 0x63u, 0x77u, 0xeeu, 0x78u, 0xf2u, 0x1bu, 0x29u, 0xefu, 0x3au,
  0x8eu, 0x38u, 0x95u, 0x67u, 0xdau, 0x7bu, 0x05u, 0x4bu, 0xfdu, 0x8au, 0x0eu, 0xe0u, 0xbcu, 0x95u, 0xcdu, 0xcbu,
  0xceu, 0x75u, 0x37u, 0x23u, 0xe7u, 0x54u, 0x9bu, 0x65u, 0x0fu, 0x5cu, 0x89u, 0xe6u, 0x65u, 0xd2u, 0x47u, 0x4eu,
  0x79u, 0x72u, 0x2cu, 0x91u, 0xc8u, 0x51u, 0xd2u, 0xebu, 0x46u, 0xf0u, 0x3du, 0x60u, 0x36u, 0x93u, 0xb0u, 0xceu,
  0x9fu, 0x42u, 0xa1u, 0x08u, 0x33u, 0xc1u, 0xd5u, 0x48u, 0x07u, 0x16u, 0x6au, 0x5bu, 0x37u, 0x5au, 0x61u, 0xe8u,
  0x90u, 0xb6u, 0xe3u, 0x51u, 0xdeu, 0xc8u, 0x8au, 0x54u, 0x1bu, 0xa8u, 0x1bu, 0x91u, 0x97u, 0x1fu, 0x34u, 0x5au,
  0x98u, 0xa2u, 0x9eu, 0x36u, 0x45u, 0x3bu, 0x95u, 0x44u, 0x45u, 0x58u, 0x4du, 0x1du, 0x2cu, 0xcdu, 0xc9u, 0x50u,
  0xccu, 0xedu, 0x22u, 0x8bu, 0xebu, 0xebu, 0x10u, 0x15u, 0x3au, 0x15u, 0x9au, 0x77u, 0x3du, 0x18u, 0xd0u, 0x5eu,
  0x9fu, 0x02u, 0x06u, 0x41u, 0x57u, 0xd7u, 0x28u, 0x06u, 0x9cu, 0xe1u, 0xe4u, 0x2cu, 0x11u, 0x80u, 0xc3u, 0x56u,
  0x38u, 0x39u, 0x5du, 0xe3u, 0xd7u, 0xb9u, 0xdfu, 0x78u, 0xe4u, 0x26u, 0x9du, 0x9eu, 0x0du, 0xdbu, 0x05u, 0x7fu,
  0x6fu, 0xb1u, 0xd6u, 0x34u, 0x83u, 0x20u, 0x3au, 0xcbu, 0xebu, 0x91u, 0x95u, 0x65u, 0x59u, 0x97u, 0x86u, 0x5du,
  0x56u, 0x3fu, 0x7du, 0x05u, 0x09u, 0xe5u, 0x68u, 0x97u, 0x45u, 0xd0u, 0x69u, 0x8bu, 0x12u, 0x74u, 0x73u, 0xd4u,
  0xf0u, 0xcau, 0x88u, 0x7eu, 0x91u, 0x38u, 0x6fu, 0xf0u, 0xe8u, 0x55u, 0x9bu, 0x12u, 0xb5u, 0xfbu, 0x0fu, 0x68u,
  0xcfu, 0xa4u, 0x54u, 0x81u, 0xa1u, 0x31u, 0xe6u, 0x1bu, 0xa5u, 0x95u, 0xfbu, 0xd6u, 0x75u, 0x76u, 0x74u, 0x26u,
  0xa0u, 0xf6u, 0x8du, 0x67u, 0xaeu, 0xafu, 0xf8u, 0x08u, 0x00u, 0x32u, 0x0du, 0xc2u, 0xecu, 0xfau, 0x81u, 0x87u,
  0x46u, 0xf2u, 0x54u, 0x4du, 0xddu, 0xdeu, 0x55u, 0x6bu, 0x7au, 0xcdu, 0x0bu, 0x72u, 0x2bu, 0x6au, 0xc5u, 0x28u,
  0x01u, 0xf5u, 0x4du, 0x09u, 0xd9u, 0x74u, 0xeau, 0x5bu, 0xbbu, 0x96u, 0xbau, 0x30u, 0xaeu, 0xdau, 0xefu, 0x6cu,
  0xa5u, 0x58u, 0x1bu, 0x33u, 0x32u, 0xe6u, 0xd0u, 0xccu, 0x08u, 0x25u, 0x1eu, 0x19u, 0xa8u, 0x4eu, 0x86u, 0xb2u,
  0xdbu, 0xd6u, 0x5au, 0x85u, 0x8fu, 0x13u, 0xacu, 0x97u, 0x24u, 0xcbu, 0x0cu, 0x21u, 0x6bu, 0x72u, 0xb8u, 0xe3u,
  0x35u, 0xbdu, 0x71u, 0x9cu, 0x50u, 0xe6u, 0x4cu, 0x68u, 0x9cu, 0x63u, 0xabu, 0x34u, 0xb3u, 0x2cu, 0x64u, 0x41u,
  0x63u, 0x49u, 0x88u, 0x4eu, 0xe3u, 0xa8u, 0xa9u, 0xd8u, 0xf1u, 0xe2u, 0x47u, 0x27u, 0x7fu, 0x69u, 0x58u, 0xa8u,
  0x31u, 0x1cu, 0xb2u, 0x22u, 0x7au, 0xf8u, 0x6au, 0x88u, 0x3eu, 0x2bu, 0x54u, 0x69u, 0x42u, 0x28u, 0x0eu, 0x06u,
  0xbeu, 0x00u, 0xdfu, 0x87u, 0x5au, 0xe1u, 0xf8u, 0x1au, 0xc6u, 0x63u, 0x8du, 0xa8u, 0xf3u, 0xe9u, 0x09u, 0x7eu,
  0x73u, 0x97u, 0xf7u, 0xb2u, 0xbcu, 0xccu, 0x9cu, 0x73u, 0x7du, 0x7bu, 0x8bu, 0x61u, 0x3bu, 0x3au, 0xb7u, 0x1fu,
  0x12u, 0x0bu, 0xb3u, 0x00u, 0xb9u, 0x03u, 0x32u, 0x8au, 0xfau, 0x88u, 0x95u, 0x21u, 0x26u, 0x2du, 0x98u, 0xb1u,
  0xa7u, 0x16u, 0x74u, 0x4bu, 0x8eu, 0x29u, 0x7du, 0x1au, 0x84u, 0x52u, 0xc9u, 0xd2u, 0xe4u, 0x98u, 0x06u, 0x76u,
};

/**
 * Initial state consisting of the decimal expansion of sqrt(7)
 *
 */
constexpr std::uint8_t Draupnir::sqrt7[512] = {
  0xa5u, 0x4fu, 0xf5u, 0x3au, 0x5fu, 0x1du, 0x36u, 0xf1u, 0xceu, 0xa7u, 0xe6u, 0x1fu, 0xc3u, 0x7au, 0x20u, 0xd5u,
  0x4au, 0x77u, 0xfeu, 0x7bu, 0x78u, 0x41u, 0x5du, 0xfcu, 0x8eu, 0x34u, 0xa6u, 0xfeu, 0x8eu, 0x2du, 0xf9u, 0x2au,
  0x4eu, 0x5bu, 0x40u, 0x8cu, 0x9cu, 0x97u, 0xd4u, 0xd8u, 0x24u, 0xa0u, 0x5eu, 0xeeu, 0x29u, 0x92u, 0x24u, 0x01u,
  0x5au, 0x81u, 0x76u, 0xcfu, 0xfcu, 0x7cu, 0x22u, 0x24u, 0xc3u, 0xedu, 0xebu, 0xdau, 0x29u, 0xbeu, 0xc4u, 0xc8u,
  0x8au, 0x07u, 0x4cu, 0x0fu, 0x4du, 0x99u, 0x96u, 0x10u, 0x9au, 0x16u, 0xd3u, 0xb1u, 0x3eu, 0x47u, 0x38u, 0x60u,
  0x3bu, 0xf7u, 0x67u, 0xe4u, 0xa3u, 0x5bu, 0xf5u, 0x48u, 0x8eu, 0x5du, 0xf4u, 0xc5u, 0x47u, 0x75u, 0xbcu, 0x00u,
  0xabu, 0x24u, 0x59u, 0x6fu, 0xf4u, 0x4du, 0x57u, 0x4au, 0x41u, 0x64u, 0x84u, 0x6du, 0xf5u, 0x4eu, 0x5eu, 0xf0u,
  0xeau, 0x40u, 0x5bu, 0x91u, 0x48u, 0x15u, 0x6au, 0xdcu, 0x55u, 0x9bu, 0x39u, 0xcau, 0xb6u, 0x3cu, 0xa1u, 0x1au,
  0xe3u, 0xddu, 0x1cu, 0xabu, 0x12u, 0xf1u, 0xc3u, 0x51u, 0x07u, 0xe0u, 0xfcu, 0x53u, 0xb9u, 0x30u, 0x26u, 0x57u,
  0x86u, 0x96u, 0x8cu, 0xf2u, 0x0eu, 0x6au, 0xbdu, 0xb2u, 0x42u, 0x68u, 0x38u, 0x38u, 0xb0u, 0x62u, 0x48u, 0x8bu,
  0xd3u, 0x54u, 0x6au, 0xd2u, 0x11u, 0x6du, 0x29u, 0x0du, 0x99u, 0x3bu, 0x51u, 0xcbu, 0xc8u, 0xe5u, 0x99u, 0x7eu,
  0x87u, 0x76u, 0xd1u, 0x0fu, 0xc7u, 0x6au, 0x2du, 0x1du, 0xe1u, 0x8au, 0x97u, 0xebu, 0x3eu, 0x45u, 0xfbu, 0x9du,
  0x9fu, 0x3bu, 0x7eu, 0xb8u, 0xb7u, 0x5cu, 0x3du, 0xcfu, 0x22u, 0x0bu, 0xfdu, 0xdbu, 0x37u, 0x16u, 0xebu, 0x60u,
  0xf4u, 0x25u, 0x57u, 0x01u, 0x81u, 0x46u, 0x5cu, 0x28u, 0xa7u, 0x14u, 0x52u, 0x29u, 0xb3u, 0x92u, 0x03u, 0x63u,
  0x5bu, 0x50u, 0x44u, 0x4fu, 0x34u, 0x26u, 0x98u, 0x1du, 0xfcu, 0x97u, 0xfeu, 0x23u, 0x20u, 0x30u, 0x19u, 0xfau,
  0xf2u, 0x10u, 0xf3u, 0x1au, 0x81u, 0x0du, 0xdfu, 0xc2u, 0x42u, 0xb8u, 0xa7u, 0x9eu, 0x68u, 0x95u, 0xf2u, 0x84u,
  0x99u, 0x63u, 0x05u, 0x64u, 0x1cu, 0xd1u, 0xd5u, 0x49u, 0x72u, 0x4fu, 0xdbu, 0x5du, 0x0cu, 0x22u, 0xf9u, 0x79u,
  0x65u, 0x05u, 0x9cu, 0x50u, 0x38u, 0x7bu, 0x38u, 0x89u, 0x5eu, 0x29u, 0xbeu, 0x3bu, 0xf2u, 0x67u, 0xd2u, 0xb8u,
  0x2au, 0xa6u, 0x8au, 0xd4u, 0xc0u, 0x5cu, 0x73u, 0xcbu, 0x56u, 0xcau, 0xcbu, 0x7eu, 0xecu, 0xfcu, 0xf8u, 0xfcu,
  0x78u, 0x00u, 0x36u, 0xe7u, 0xa0u, 0xd6u, 0x07u, 0x01u, 0xcau, 0x50u, 0xa7u, 0xcfu, 0x69u, 0x36u, 0x89u, 0xacu,
  0x3cu, 0xf2u, 0xabu, 0x2cu, 0x37u, 0xe8u, 0xabu, 0x51u, 0xebu, 0x0cu, 0xb6u, 0xe8u, 0x65u, 0xd1u, 0x07u, 0x7bu,
  0x0fu, 0x08u, 0x2cu, 0xf6u, 0xd8u, 0xa0u, 0x5du, 0x1fu, 0x38u, 0x6au, 0x2eu, 0xd1u, 0x1bu, 0x2au, 0x92u, 0x1cu,
  0xe6u, 0x65u, 0x44u, 0xb0u, 0xaeu, 0xf2u, 0x49u, 0x35u, 0x3bu, 0xc3u, 0xd0u, 0x29u, 0x6au, 0xffu, 0x2du, 0xa4u,
  0x6du, 0xaeu, 0x1bu, 0xa6u, 0xf5u, 0xf8u, 0x1au, 0x04u, 0xb3u, 0xdfu, 0x7bu, 0x9au, 0x4cu, 0xa7u, 0x08u, 0x16u,
  0xc8u, 0xe8u, 0x7du, 0x35u, 0x24u, 0x94u, 0xa8u, 0x3du, 0x15u, 0x21u, 0x43u, 0xbau, 0xc3u, 0xf4u, 0xfau, 0x57u,
  0x32u, 0xabu, 0x0au, 0xbau, 0x44u, 0xcdu, 0xbcu, 0xd6u, 0x82u, 0x50u, 0x2au, 0xebu, 0x07u, 0xb1u, 0x6fu, 0xbbu,
  0xf2u, 0xd7u, 0x77u, 0xdfu, 0x58u, 0xf7u, 0xa4u, 0x13u, 0xa6u, 0x64u, 0x61u, 0x9fu, 0xfdu, 0x47u, 0xaau, 0x86u,
  0x55u, 0xbfu, 0xd4u, 0x8bu, 0xb0u, 0x84u, 0x34u, 0xcdu, 0x50u, 0x04u, 0xc7u, 0x31u, 0xa8u, 0x65u, 0xe7u, 0x6au,
  0x9du, 0x73u, 0x8fu, 0x39u, 0x63u, 0x82u, 0xa9u, 0xc0u, 0xe9u, 0x13u, 0x95u, 0x84u, 0x22u, 0x16u, 0xd2u, 0xd1u,
  0x53u, 0xfdu, 0x40u, 0x8bu, 0x1fu, 0x66u, 0xa7u, 0x55u, 0x17u, 0xe1u, 0xc1u, 0x45u, 0x5au, 0x6du, 0xe8u, 0x10u,
  0x74u, 0xd9u, 0x73u, 0x05u, 0x65u, 0x8cu, 0x84u, 0xdau, 0x9eu, 0x7eu, 0xb4u, 0x9du, 0xa5u, 0x63u, 0xe2u, 0xb8u,
  0xfcu, 0xd7u, 0x78u, 0x92u, 0x04u, 0x77u, 0x2du, 0x24u, 0x37u, 0xb7u, 0x70u, 0x8du, 0x5fu, 0xafu, 0xb4u, 0x9cu,
};

/**
 * Initial state consisting of the decimal expansion of sqrt(11)
 *
 */
constexpr std::uint8_t Draupnir::sqrt11[512] = {
  0x51u, 0x0eu, 0x52u, 0x7fu, 0xadu, 0xe6u, 0x82u, 0xd1u, 0xdeu, 0x49u, 0xe3u, 0x30u, 0xe4u, 0x2bu, 0x4cu, 0xbbu,
  0x29u, 0xbau, 0x5au, 0x45u, 0x53u, 0x16u, 0xe0u, 0xc6u, 0x55u, 0x07u, 0xcdu, 0x18u, 0xe9u, 0xe5u, 0x1eu, 0x69u,
  0x4fu, 0x9bu, 0x11u, 0xc8u, 0x10u, 0x09u, 0xa0u, 0x30u, 0xe3u, 0xd3u, 0x77u, 0x5fu, 0x15u, 0x53u, 0x85u, 0xc6u,
  0x48u, 0x92u, 0x21u, 0x63u, 0x27u, 0x88u, 0xfbu, 0x30u, 0x41u, 0x92u, 0x1du, 0xb8u, 0xfeu, 0xebu, 0x38u, 0xc2u,
  0x9au, 0xf9u, 0x4au, 0x7cu, 0x48u, 0xbbu, 0xd5u, 0xb6u, 0x90u, 0xedu, 0x29u, 0x1fu, 0x2fu, 0x90u, 0x05u, 0x68u,
  0x6du, 0x4cu, 0xccu, 0xacu, 0x51u, 0x87u, 0x76u, 0x5au, 0xa3u, 0xf0u, 0xfbu, 0x93u, 0x9eu, 0x9cu, 0xe3u, 0xebu,
  0x3cu, 0x13u, 0x72u, 0x6eu, 0xbfu, 0x62u, 0x61u, 0x5au, 0x82u, 0xd8u, 0x93u, 0x90u, 0x45u, 0xd7u, 0x72u, 0x9au,
  0x20u, 0x6eu, 0xecu, 0x6eu, 0x0bu, 0xccu, 0xf7u, 0x32u, 0xfbu, 0xb2u, 0x07u, 0x19u, 0x92u, 0xa4u, 0x9au, 0x2cu,
  0x31u, 0x89u, 0x54u, 0x0du, 0x61u, 0x27u, 0x34u, 0xc4u, 0xc7u, 0xe7u, 0x88u, 0x89u, 0x3du, 0x92u, 0x1eu, 0xe1u,
  0x1eu, 0x89u, 0xa3u, 0x0fu, 0x6au, 0x06u, 0x32u, 0x9du, 0xadu, 0x45u, 0x21u, 0x07u, 0x64u, 0xbcu, 0x85u, 0x68u,
  0xb7u, 0x54u, 0x01u, 0x50u, 0x7au, 0x74u, 0x45u, 0xc5u, 0x90u, 0x27u, 0xedu, 0xccu, 0x1au, 0x46u, 0xd3u, 0xe7u,
  0x38u, 0x76u, 0xe6u, 0x3cu, 0xd7u, 0xd7u, 0xeau, 0x59u, 0x6eu, 0xb1u, 0xf2u, 0xedu, 0x42u, 0xf8u, 0x9au, 0x05u,
  0xb2u, 0x08u, 0x2fu, 0x49u, 0xbau, 0xbau, 0xa2u, 0xc6u, 0xa0u, 0x22u, 0xc5u, 0xb2u, 0x13u, 0x49u, 0x37u, 0x1au,
  0xfeu, 0x76u, 0xafu, 0xfbu, 0x05u, 0x04u, 0x1du, 0x65u, 0x88u, 0x7du, 0x6du, 0xe0u, 0x55u, 0x46u, 0x2cu, 0x23u,
  0x89u, 0x72u, 0x85u, 0x76u, 0x1eu, 0x32u, 0xcau, 0x94u, 0x2du, 0x62u, 0x46u, 0xd4u, 0x3cu, 0xcau, 0x5eu, 0xcdu,
  0x05u, 0x5du, 0xc5u, 0x5bu, 0xbeu, 0x7cu, 0xe1u, 0x72u, 0x92u, 0xedu, 0x4au, 0xa7u, 0x61u, 0xaeu, 0x85u, 0x94u,
  0x02u, 0xcfu, 0xc9u, 0x03u, 0xd2u, 0xa2u, 0x87u, 0x88u, 0x74u, 0xcau, 0x8du, 0x96u, 0xa9u, 0x00u, 0x2au, 0x91u,
  0x30u, 0xb7u, 0x03u, 0xe3u, 0x2au, 0xcdu, 0xe5u, 0xa9u, 0x2eu, 0x55u, 0x31u, 0x40u, 0x28u, 0x05u, 0xb9u, 0xc1u,
  0x8cu, 0x15u, 0x6eu, 0x0cu, 0x6cu, 0xa4u, 0xf7u, 0xf5u, 0xafu, 0x8bu, 0x81u, 0x48u, 0x91u, 0xf4u, 0xeau, 0x5eu,
  0x0cu, 0xbbu, 0xfdu, 0x92u, 0xdfu, 0x12u, 0x76u, 0x42u, 0xdau, 0xa1u, 0xb3u, 0xc8u, 0x35u, 0xe3u, 0x31u, 0xa1u,
  0x22u, 0x48u, 0xa3u, 0x90u, 0x9eu, 0xa6u, 0xc0u, 0xd9u, 0x3au, 0x04u, 0x0bu, 0xb4u, 0xf2u, 0x27u, 0xdbu, 0x1du,
  0xdau, 0xb9u, 0xe3u, 0x70u, 0x0bu, 0x61u, 0x16u, 0x73u, 0x9fu, 0x39u, 0x2bu, 0x30u, 0xc8u, 0xcfu, 0x90u, 0x31u,
  0x47u, 0x05u, 0x5fu, 0x51u, 0x72u, 0x4eu, 0x8eu, 0x1cu, 0x6bu, 0xefu, 0x77u, 0x4du, 0x1au, 0x18u, 0x1eu, 0x2bu,
  0xe8u, 0x9cu, 0x1bu, 0x57u, 0x5fu, 0x73u, 0xc0u, 0x86u, 0xb1u, 0xb3u, 0xfdu, 0x68u, 0xa1u, 0x59u, 0xdau, 0x4eu,
  0x83u, 0x74u, 0x7bu, 0x36u, 0x6au, 0x80u, 0xcfu, 0xebu, 0x09u, 0xb3u, 0x75u, 0x6cu, 0x3bu, 0x4au, 0xecu, 0x9fu,
  0x46u, 0x3fu, 0x11u, 0xe3u, 0x81u, 0xc9u, 0x08u, 0xf8u, 0xd6u, 0xe2u, 0x1fu, 0x1cu, 0x45u, 0x8bu, 0x2cu, 0x71u,
  0x81u, 0xb7u, 0x85u, 0xbfu, 0xedu, 0x82u, 0x2fu, 0x05u, 0xf0u, 0x9eu, 0xa6u, 0x48u, 0x10u, 0x90u, 0x11u, 0xcfu,
  0x21u, 0xacu, 0x74u, 0x0bu, 0xe6u, 0x41u, 0xccu, 0xfcu, 0x18u, 0x0au, 0x81u, 0x04u, 0x98u, 0xd4u, 0x7bu, 0x0bu,
  0xf7u, 0xe7u, 0x80u, 0x16u, 0x9eu, 0xadu, 0xb1u, 0x9cu, 0x0eu, 0x8fu, 0xddu, 0x65u, 0x09u, 0x2fu, 0xf9u, 0x4du,
  0x5eu, 0x51u, 0x42u, 0xafu, 0xdcu, 0x51u, 0xd6u, 0xf9u, 0x9au, 0x47u, 0xd2u, 0x62u, 0x5au, 0xa3u, 0x45u, 0xb8u,
  0x73u, 0xd4u, 0x87u, 0x34u, 0xddu, 0x68u, 0x84u, 0x0du, 0x8au, 0xc8u, 0x78u, 0xc0u, 0x49u, 0x07u, 0xbeu, 0x2eu,
  0x53u, 0x89u, 0x9du, 0xf2u, 0xcfu, 0x1fu, 0x65u, 0xb6u, 0x34u, 0x44u, 0x9au, 0xa9u, 0xa2u, 0x16u, 0x18u, 0x16u,
};

/**
 * Initial state consisting of the decimal expansion of 1/sqrt(2)
 *
 */
constexpr std::uint8_t Draupnir::invSqrt2[512] = {
  0xb5u, 0x04u, 0xf3u, 0x33u, 0xf9u, 0xdeu, 0x64u, 0x84u, 0x59u, 0x7du, 0x89u, 0xb3u, 0x75u, 0x4au, 0xbeu, 0x9fu,
  0x1du, 0x6fu, 0x60u, 0xbau, 0x89u, 0x3bu, 0xa8u, 0x4cu, 0xedu, 0x17u, 0xacu, 0x85u, 0x83u, 0x33u, 0x99u, 0x15u,
  0x4au, 0xfcu, 0x83u, 0x04u, 0x3au, 0xb8u, 0xa2u, 0xc3u, 0xa8u, 0xb1u, 0xfeu, 0x6fu, 0xdcu, 0x83u, 0xdbu, 0x39u,
  0x0fu, 0x74u, 0xa8u, 0x5eu, 0x43u, 0x9cu, 0x7bu, 0x4au, 0x78u, 0x04u, 0x87u, 0x36u, 0x3du, 0xfau, 0x27u, 0x68u,
  0xd2u, 0x20u, 0x2eu, 0x87u, 0x42u, 0xafu, 0x1fu, 0x4eu, 0x53u, 0x05u, 0x9cu, 0x60u, 0x11u, 0xbcu, 0x33u, 0x7bu,
  0xcau, 0xb1u, 0xbcu, 0x91u, 0x16u, 0x88u, 0x45u, 0x8au, 0x46u, 0x0au, 0xbcu, 0x72u, 0x2fu, 0x7cu, 0x4eu, 0x33u,
  0xc6u, 0xd5u, 0xa8u, 0xa3u, 0x8bu, 0xb7u, 0xe9u, 0xdcu, 0xcbu, 0x2au, 0x63u, 0x43u, 0x31u, 0xf3u, 0xc8u, 0x4du,
  0xf5u, 0x2fu, 0x12u, 0x0fu, 0x83u, 0x6eu, 0x58u, 0x2eu, 0xeau, 0xa4u, 0xa0u, 0x89u, 0x90u, 0x40u, 0xcau, 0x4au,
  0x81u, 0x39u, 0x4au, 0xb6u, 0xd8u, 0xfdu, 0x0eu, 0xfdu, 0xf4u, 0xd3u, 0xa0u, 0x2cu, 0xebu, 0xc9u, 0x3eu, 0x0cu,
  0x42u, 0x64u, 0xdau, 0xbcu, 0xd5u, 0x28u, 0xb6u, 0x51u, 0xb8u, 0xcfu, 0x34u, 0x1bu, 0x6fu, 0x82u, 0x36u, 0xc7u,
  0x01u, 0x04u, 0xdcu, 0x01u, 0xfeu, 0x32u, 0x35u, 0x2fu, 0x33u, 0x2au, 0x5eu, 0x9fu, 0x7bu, 0xdau, 0x1eu, 0xbfu,
  0xf6u, 0xa1u, 0xbeu, 0x3fu, 0xcau, 0x22u, 0x13u, 0x07u, 0xdeu, 0xa0u, 0x62u, 0x41u, 0xf7u, 0xaau, 0x81u, 0xc2u,
  0xc1u, 0xfcu, 0xbdu, 0xdeu, 0xa2u, 0xf7u, 0xdcu, 0x33u, 0x18u, 0x83u, 0x8au, 0x2eu, 0xafu, 0xf5u, 0xf3u, 0xb2u,
  0xd2u, 0x4fu, 0x4au, 0x76u, 0x3fu, 0xacu, 0xb8u, 0x82u, 0xfdu, 0xfeu, 0x17u, 0x0fu, 0xd3u, 0xb1u, 0xf7u, 0x80u,
  0xf9u, 0xacu, 0xceu, 0x41u, 0x79u, 0x7fu, 0x28u, 0x05u, 0xc2u, 0x46u, 0x78u, 0x5eu, 0x92u, 0x95u, 0x70u, 0x23u,
  0x5fu, 0xcfu, 0x8fu, 0x7bu, 0xcau, 0x3eu, 0xa3u, 0x3bu, 0x4du, 0x7cu, 0x60u, 0xa5u, 0xe6u, 0x33u, 0xe3u, 0xe1u,
  0x48u, 0x5fu, 0x3bu, 0x49u, 0x4du, 0x82u, 0xbcu, 0x60u, 0x85u, 0xacu, 0x27u, 0xdau, 0x43u, 0xe4u, 0x92u, 0x7au,
  0xdbu, 0x8fu, 0xc1u, 0x6eu, 0x69u, 0x48u, 0x1bu, 0x04u, 0xefu, 0x74u, 0x48u, 0x94u, 0xc1u, 0xeau, 0x75u, 0x56u,
  0x87u, 0x75u, 0x19u, 0x0fu, 0xbau, 0x44u, 0xfau, 0x35u, 0x3fu, 0x48u, 0x18u, 0x5fu, 0x10u, 0x7du, 0xbbu, 0x4au,
  0x77u, 0xdau, 0xc6u, 0x4cu, 0xc2u, 0x66u, 0xebu, 0x85u, 0x0eu, 0xd4u, 0x82u, 0x2eu, 0x1eu, 0x89u, 0x9du, 0x03u,
  0x42u, 0x11u, 0xebu, 0x71u, 0xc1u, 0x81u, 0xecu, 0x80u, 0xddu, 0x4eu, 0xd1u, 0xa3u, 0xb3u, 0x42u, 0x3cu, 0xb6u,
  0x2eu, 0x6au, 0xcbu, 0x96u, 0xe0u, 0x7fu, 0x9au, 0xa0u, 0x61u, 0xa0u, 0x94u, 0xa1u, 0x6bu, 0x20u, 0x30u, 0x80u,
  0xf7u, 0xb7u, 0xe3u, 0x6fu, 0x48u, 0x8au, 0x51u, 0x5au, 0x79u, 0x24u, 0x63u, 0x44u, 0xe3u, 0x00u, 0x5du, 0xa0u,
  0x54u, 0x5au, 0xb5u, 0x82u, 0x0fu, 0xeau, 0xefu, 0x37u, 0x06u, 0xe8u, 0x63u, 0x36u, 0xa4u, 0x18u, 0xffu, 0x3fu,
  0xffu, 0xabu, 0xabu, 0xf2u, 0x38u, 0x84u, 0xc0u, 0x66u, 0xdeu, 0xaeu, 0x13u, 0x42u, 0x42u, 0xedu, 0x2fu, 0x48u,
  0xd9u, 0xf1u, 0x79u, 0x02u, 0xdbu, 0x93u, 0x92u, 0xdcu, 0xb8u, 0xebu, 0x05u, 0x0fu, 0xc4u, 0x47u, 0x84u, 0x50u,
  0x53u, 0x70u, 0x80u, 0x66u, 0x76u, 0xe1u, 0x67u, 0x2du, 0xecu, 0xc5u, 0x77u, 0x38u, 0xf2u, 0x17u, 0x13u, 0x46u,
  0x9bu, 0xd3u, 0x03u, 0x97u, 0x91u, 0x01u, 0x1au, 0x30u, 0x9fu, 0xfeu, 0x11u, 0x22u, 0x9au, 0x1cu, 0xf5u, 0x4bu,
  0xd4u, 0xccu, 0xdbu, 0x64u, 0xf1u, 0xe7u, 0x38u, 0xfcu, 0xa6u, 0xb0u, 0x49u, 0x56u, 0x70u, 0x90u, 0x55u, 0xc7u,
  0x2au, 0x87u, 0x06u, 0xaau, 0x88u, 0xb4u, 0x43u, 0x18u, 0xbbu, 0xc6u, 0x7bu, 0x01u, 0xa8u, 0x68u, 0x17u, 0xf4u,
  0x2fu, 0x94u, 0xf6u, 0x45u, 0xf2u, 0xe3u, 0x95u, 0xc0u, 0x3du, 0x7au, 0xbbu, 0x8du, 0xc1u, 0x2du, 0x98u, 0x50u,
  0x73u, 0xc1u, 0xbbu, 0x54u, 0x8eu, 0x04u, 0x63u, 0x53u, 0xf8u, 0x7cu, 0x79u, 0x91u, 0xd9u, 0xb1u, 0x40u, 0xe9u,
};

/**
 * Initial state consisting of the decimal expansion of 1/sqrt(3)
 *
 */
constexpr std::uint8_t Draupnir::invSqrt3[512] = {
  0x93u, 0xcdu, 0x3au, 0x2cu, 0x81u, 0x98u, 0xe2u, 0x69u, 0x0cu, 0x7cu, 0x0fu, 0x25u, 0x7du, 0x92u, 0xbeu, 0x83u,
  0x0cu, 0x9du, 0x66u, 0xeeu, 0xc6u, 0x9eu, 0x17u, 0xddu, 0x97u, 0xb5u, 0x8cu, 0xc2u, 0xcfu, 0x6cu, 0x8cu, 0xf6u,
  0x18u, 0x59u, 0x45u, 0x48u, 0x74u, 0xfbu, 0x1fu, 0x3fu, 0x38u, 0x86u, 0x58u, 0xe4u, 0xb0u, 0xb6u, 0x2fu, 0xd7u,
  0xeeu, 0xc4u, 0x50u, 0xc4u, 0x8bu, 0xe0u, 0xa4u, 0x22u, 0xf0u, 0x44u, 0x66u, 0x8au, 0xb3u, 0x9du, 0xe1u, 0x2bu,
  0xe8u, 0xa0u, 0x60u, 0xf7u, 0x5bu, 0xd9u, 0x68u, 0xf7u, 0x9fu, 0x74u, 0xf4u, 0xbeu, 0x9cu, 0x0fu, 0x3du, 0x10u,
  0x09u, 0x23u, 0xfcu, 0x71u, 0x3au, 0x7eu, 0x58u, 0xa9u, 0xcfu, 0x94u, 0xfbu, 0xbeu, 0x33u, 0x8au, 0xa1u, 0xd2u,
  0x63u, 0x16u, 0x25u, 0x10u, 0x4cu, 0x83u, 0x0eu, 0x3cu, 0x7bu, 0x80u, 0x79u, 0x9au, 0x54u, 0x1du, 0x88u, 0x67u,
  0x1fu, 0xd5u, 0x05u, 0xebu, 0xf6u, 0x1au, 0x67u, 0xcdu, 0x8cu, 0x97u, 0xeeu, 0x85u, 0x9cu, 0x71u, 0x00u, 0xc5u,
  0x74u, 0xa5u, 0x5cu, 0x42u, 0x58u, 0xf3u, 0xb4u, 0xebu, 0x3eu, 0x51u, 0xdau, 0x58u, 0x16u, 0xbbu, 0xeau, 0xf1u,
  0xccu, 0xdcu, 0xe0u, 0x13u, 0x48u, 0x76u, 0x48u, 0x16u, 0x6bu, 0x31u, 0x8eu, 0x3bu, 0x21u, 0x9cu, 0xc0u, 0xfdu,
  0x24u, 0xb9u, 0x85u, 0x29u, 0xeau, 0x47u, 0x6eu, 0x68u, 0x9eu, 0x46u, 0x53u, 0x52u, 0x7bu, 0x79u, 0x78u, 0x65u,
  0x96u, 0xdfu, 0x18u, 0x55u, 0x44u, 0x96u, 0x05u, 0xb1u, 0x8cu, 0xebu, 0xceu, 0x63u, 0x92u, 0x55u, 0xd8u, 0xfcu,
  0xc9u, 0x5au, 0xfdu, 0x57u, 0x8du, 0xa9u, 0xa6u, 0xb2u, 0xdau, 0x51u, 0x27u, 0xf0u, 0xf1u, 0xe7u, 0x54u, 0x5du,
  0xc0u, 0xf7u, 0xa9u, 0xc0u, 0xa8u, 0x9bu, 0x69u, 0x22u, 0x28u, 0x06u, 0x9fu, 0xc0u, 0xaeu, 0x78u, 0x46u, 0x5bu,
  0xe6u, 0x82u, 0x8fu, 0x55u, 0x9du, 0x35u, 0xf4u, 0x9cu, 0x03u, 0x8cu, 0xdeu, 0x91u, 0xbcu, 0x64u, 0x67u, 0x0bu,
  0x70u, 0xdeu, 0x26u, 0x23u, 0x3au, 0x5eu, 0x44u, 0xcbu, 0x98u, 0x10u, 0xc9u, 0xa4u, 0x59u, 0xb2u, 0xebu, 0x6cu,
  0xbcu, 0x9cu, 0xcbu, 0x45u, 0x3cu, 0x22u, 0xeau, 0x09u, 0x03u, 0x25u, 0x4cu, 0xd2u, 0x8du, 0x2du, 0x1cu, 0xffu,
  0xc2u, 0x3cu, 0x70u, 0x24u, 0x60u, 0x0eu, 0x93u, 0x91u, 0xf6u, 0x67u, 0x06u, 0x70u, 0x7du, 0x20u, 0x2au, 0xf7u,
  0xc5u, 0xf7u, 0xe2u, 0x4fu, 0x0fu, 0x99u, 0x47u, 0x43u, 0x90u, 0x11u, 0x6au, 0x77u, 0xd3u, 0xebu, 0xa6u, 0xf1u,
  0x00u, 0xaeu, 0x5bu, 0x97u, 0x36u, 0x9fu, 0x1cu, 0x07u, 0xacu, 0x5cu, 0x50u, 0x9du, 0xb0u, 0x42u, 0x18u, 0xd2u,
  0xcfu, 0x35u, 0x1au, 0x9fu, 0x4bu, 0xacu, 0xf5u, 0x44u, 0xafu, 0x4du, 0x6cu, 0xceu, 0x59u, 0x59u, 0x05u, 0x87u,
  0xd5u, 0x5bu, 0xc2u, 0xe3u, 0x18u, 0x7eu, 0x43u, 0x7cu, 0x94u, 0x9bu, 0x3bu, 0x99u, 0x2eu, 0x01u, 0x61u, 0x10u,
  0x53u, 0xc3u, 0x71u, 0x50u, 0x0fu, 0xeau, 0x00u, 0xe5u, 0x94u, 0x77u, 0x3bu, 0xd6u, 0x4cu, 0x68u, 0x27u, 0xedu,
  0xe6u, 0x91u, 0xb2u, 0xfdu, 0x67u, 0xfau, 0xdeu, 0x8au, 0x36u, 0xa3u, 0x9eu, 0x19u, 0xf7u, 0xd1u, 0x7cu, 0x19u,
  0x77u, 0x7fu, 0xa2u, 0x7du, 0x8du, 0x4au, 0x0bu, 0x00u, 0x4fu, 0xbdu, 0x6du, 0x1du, 0x14u, 0x82u, 0xeau, 0x73u,
  0x12u, 0x7du, 0xe5u, 0x20u, 0x8cu, 0x17u, 0x9cu, 0x9au, 0x7cu, 0xebu, 0xdfu, 0x89u, 0x1fu, 0x68u, 0xdau, 0x2bu,
  0xa3u, 0x9eu, 0x69u, 0x39u, 0x2eu, 0x94u, 0xf1u, 0xd1u, 0x42u, 0xb6u, 0x66u, 0x43u, 0x3cu, 0xdbu, 0x8fu, 0x2du,
  0x86u, 0x21u, 0x31u, 0x22u, 0xd4u, 0x19u, 0xa9u, 0xb7u, 0x83u, 0xfdu, 0x95u, 0xb5u, 0x1au, 0x68u, 0x6du, 0xabu,
  0xd5u, 0xcau, 0xb0u, 0x15u, 0xc4u, 0x0bu, 0xb4u, 0x73u, 0x91u, 0xa3u, 0x1cu, 0x44u, 0x36u, 0x70u, 0x8au, 0xe8u,
  0x7eu, 0x89u, 0x5fu, 0x54u, 0x34u, 0x0cu, 0xbeu, 0x95u, 0xdau, 0xa0u, 0x90u, 0x2du, 0xdfu, 0xa8u, 0xf7u, 0xf4u,
  0x15u, 0xf2u, 0x15u, 0x35u, 0x9bu, 0x88u, 0xcau, 0x1fu, 0x1cu, 0x0au, 0x70u, 0xcbu, 0x28u, 0xe6u, 0xcdu, 0x09u,
  0x9fu, 0x9du, 0x1du, 0xc1u, 0x24u, 0xbau, 0xf3u, 0x61u, 0x16u, 0xdbu, 0x3bu, 0x30u, 0xf4u, 0x24u, 0x5du, 0xafu,
};

/**
 * Initial state consisting of the decimal expansion of 1/sqrt(5)
 *
 */
constexpr std::uint8_t Draupnir::invSqrt5[512] = {
  0x72u, 0x7cu, 0x97u, 0x16u, 0xffu, 0xb7u, 0x64u, 0xd5u, 0x94u, 0xa5u, 0x19u, 0xc0u, 0x25u, 0x2bu, 0xe9u, 0xaeu,
  0x6du, 0x00u, 0xdcu, 0x91u, 0x94u, 0xa7u, 0x60u, 0xedu, 0x96u, 0x91u, 0xc4u, 0x07u, 0x20u, 0x4du, 0x6cu, 0x3bu,
  0xa9u, 0x5cu, 0xc6u, 0xadu, 0x54u, 0xbau, 0x97u, 0xccu, 0x67u, 0xb6u, 0x01u, 0xbeu, 0x24u, 0xc7u, 0x00u, 0xffu,
  0x9au, 0x36u, 0x92u, 0xd0u, 0x76u, 0x80u, 0x13u, 0x34u, 0x4du, 0x88u, 0xebu, 0x0eu, 0x6cu, 0x7au, 0xf2u, 0x7cu,
  0x60u, 0x2au, 0xbcu, 0xacu, 0x3cu, 0x6fu, 0xcfu, 0xccu, 0x35u, 0x67u, 0xd8u, 0x92u, 0xccu, 0xb2u, 0x32u, 0x4fu,
  0x5bu, 0x87u, 0xa8u, 0xbau, 0x4eu, 0xe2u, 0xd5u, 0xcdu, 0xeau, 0xbeu, 0xd1u, 0xebu, 0x98u, 0xccu, 0xb1u, 0x8du,
  0x5au, 0x92u, 0x7bu, 0x16u, 0xb9u, 0xb7u, 0xb4u, 0x7au, 0x4bu, 0x2fu, 0xb1u, 0xcau, 0x05u, 0x6eu, 0xc9u, 0x72u,
  0x1cu, 0x71u, 0xb7u, 0x7bu, 0x2bu, 0xb2u, 0x34u, 0x42u, 0x65u, 0xe8u, 0x69u, 0x60u, 0x25u, 0xb7u, 0x8fu, 0x8fu,
  0x29u, 0x4au, 0xa4u, 0xa0u, 0xc7u, 0xddu, 0xb8u, 0xadu, 0xcfu, 0xdfu, 0x4eu, 0xc7u, 0xadu, 0xf6u, 0xdbu, 0x0fu,
  0xb1u, 0xe3u, 0xa2u, 0x83u, 0x8eu, 0x76u, 0xc3u, 0xc8u, 0xa7u, 0xc9u, 0xa5u, 0xe0u, 0x0au, 0xeau, 0x56u, 0x8fu,
  0xb9u, 0x73u, 0xb9u, 0xceu, 0x70u, 0xc0u, 0x5du, 0xdbu, 0x34u, 0x9eu, 0x15u, 0x45u, 0x71u, 0x78u, 0x79u, 0xfbu,
  0x50u, 0x24u, 0x93u, 0xddu, 0x2cu, 0x8eu, 0x82u, 0x10u, 0xd2u, 0x54u, 0xd2u, 0x50u, 0x51u, 0x6cu, 0xa4u, 0x12u,
  0x1eu, 0x86u, 0xecu, 0x71u, 0x41u, 0x0bu, 0xeau, 0xa7u, 0x41u, 0x11u, 0xa9u, 0x05u, 0xd5u, 0xc2u, 0xc1u, 0xdcu,
  0xf5u, 0xc9u, 0x06u, 0xe8u, 0xc8u, 0xc8u, 0x9cu, 0xd1u, 0x0bu, 0x9du, 0xebu, 0xb1u, 0x72u, 0x9eu, 0x90u, 0x12u,
  0xecu, 0x9au, 0x01u, 0x40u, 0x44u, 0xc4u, 0xa1u, 0x9au, 0xecu, 0x2du, 0x2du, 0xa2u, 0x69u, 0xe6u, 0x8du, 0x77u,
  0xa4u, 0xd8u, 0x45u, 0xfau, 0x5eu, 0x58u, 0x5fu, 0xe4u, 0xfau, 0x6eu, 0x1fu, 0x86u, 0x02u, 0xc5u, 0x67u, 0x7fu,
  0xe3u, 0x23u, 0x91u, 0x3du, 0xb3u, 0xd3u, 0x3eu, 0xf5u, 0x95u, 0x83u, 0x84u, 0x47u, 0x78u, 0x51u, 0x81u, 0x45u,
  0xdeu, 0x0cu, 0xb2u, 0x9au, 0x9bu, 0x94u, 0x48u, 0x1eu, 0x41u, 0x29u, 0xaeu, 0xb5u, 0x6au, 0x17u, 0x4au, 0x5du,
  0xc9u, 0xc2u, 0x1bu, 0x4cu, 0x83u, 0x71u, 0xafu, 0xfcu, 0xfbu, 0x44u, 0x52u, 0x36u, 0xf1u, 0x32u, 0x36u, 0x48u,
  0x29u, 0x87u, 0x44u, 0x19u, 0xedu, 0x09u, 0xfau, 0xd2u, 0x54u, 0x51u, 0x32u, 0x5eu, 0x17u, 0x7eu, 0x17u, 0x3au,
  0xecu, 0xfeu, 0x1cu, 0x47u, 0xefu, 0xbcu, 0xcbu, 0x34u, 0xccu, 0xd6u, 0xcfu, 0x8du, 0x62u, 0x98u, 0x80u, 0x4eu,
  0x41u, 0x63u, 0xaau, 0x75u, 0xf9u, 0x2cu, 0x77u, 0x7bu, 0xe5u, 0x5cu, 0x35u, 0x7du, 0x3bu, 0xe2u, 0x27u, 0x6eu,
  0x66u, 0xcau, 0xa9u, 0x01u, 0xf8u, 0x4au, 0x95u, 0x45u, 0x8bu, 0xeau, 0xf2u, 0x09u, 0xbcu, 0x92u, 0x2fu, 0xe2u,
  0x87u, 0x78u, 0x05u, 0x70u, 0xa3u, 0xc7u, 0xc3u, 0x5cu, 0x01u, 0xa1u, 0x06u, 0x05u, 0x21u, 0xa9u, 0x4eu, 0x23u,
  0xc5u, 0x91u, 0x45u, 0x4du, 0xe9u, 0x6au, 0x55u, 0xb7u, 0xd4u, 0x28u, 0x9cu, 0x06u, 0xafu, 0x16u, 0xf1u, 0xc7u,
  0x0au, 0xbfu, 0x7du, 0x1fu, 0x43u, 0x61u, 0x42u, 0x7bu, 0x52u, 0x7au, 0x55u, 0x70u, 0xf0u, 0xa2u, 0x7au, 0x73u,
  0x7au, 0x41u, 0xe8u, 0x0fu, 0xc7u, 0x21u, 0xbbu, 0x91u, 0xc9u, 0xfau, 0x0eu, 0x3bu, 0x19u, 0x7bu, 0x78u, 0x21u,
  0xa3u, 0x6cu, 0x23u, 0xa0u, 0x7eu, 0xfeu, 0x7bu, 0xb4u, 0xd9u, 0x3bu, 0xddu, 0xaeu, 0xa6u, 0xd4u, 0xcfu, 0x9au,
  0xf2u, 0xccu, 0xf9u, 0x81u, 0x78u, 0x93u, 0x98u, 0x05u, 0x5au, 0xe0u, 0xb5u, 0xeeu, 0x97u, 0x2eu, 0x9bu, 0x7fu,
  0xb0u, 0xb7u, 0xfeu, 0x56u, 0xf2u, 0x8fu, 0x52u, 0x7du, 0x7fu, 0x7fu, 0x1bu, 0xe0u, 0x3fu, 0x0bu, 0xbeu, 0x39u,
  0x6au, 0x02u, 0x57u, 0x00u, 0x25u, 0x00u, 0xa3u, 0xb5u, 0x65u, 0x4eu, 0x84u, 0x39u, 0xd4u, 0x6fu, 0x84u, 0xf0u,
  0x54u, 0x9eu, 0x17u, 0x42u, 0x4fu, 0xa1u, 0xe5u, 0xd2u, 0x1au, 0x76u, 0xf5u, 0x2au, 0x2du, 0xb8u, 0x01u, 0x4au,
};

/**
 * Initial state consisting of the decimal expansion of 1/sqrt(7)
 *
 */
constexpr std::uint8_t Draupnir::invSqrt7[512] = {
  0x60u, 0xc2u, 0x47u, 0x9au, 0x9fu, 0xdfu, 0x9au, 0x22u, 0x8bu, 0x3cu, 0x8eu, 0x96u, 0xd2u, 0xc8u, 0x4du, 0xd5u,
  0x53u, 0xc7u, 0xffu, 0xc8u, 0x7eu, 0xe4u, 0xc4u, 0x48u, 0xa6u, 0x99u, 0xceu, 0xb6u, 0xa6u, 0x98u, 0xdau, 0x73u,
  0xc2u, 0x0du, 0x09u, 0x38u, 0xa8u, 0xa7u, 0xf9u, 0xd5u, 0xbcu, 0x16u, 0xe8u, 0xfdu, 0x73u, 0xa7u, 0x29u, 0xb7u,
  0x0cu, 0xedu, 0xecu, 0x66u, 0xdau, 0xedu, 0x29u, 0x72u, 0xf7u, 0x6bu, 0x21u, 0xb1u, 0x73u, 0xadu, 0x89u, 0xd3u,
  0x81u, 0x6eu, 0xc1u, 0xb9u, 0x0bu, 0x15u, 0xf0u, 0xddu, 0xccu, 0xdeu, 0xb0u, 0x87u, 0x08u, 0xe5u, 0x9au, 0x56u,
  0xe3u, 0xfeu, 0xc5u, 0xb2u, 0xf2u, 0xc3u, 0xfeu, 0x78u, 0x14u, 0x56u, 0x90u, 0xaeu, 0x77u, 0xecu, 0x3fu, 0x6du,
  0xcfu, 0x4eu, 0x55u, 0xebu, 0x6cu, 0x0bu, 0x0cu, 0x78u, 0x52u, 0x7cu, 0x12u, 0xebu, 0x23u, 0x0bu, 0x32u, 0x22u,
  0x6au, 0x9bu, 0x7au, 0xcbu, 0x9cu, 0x95u, 0x58u, 0x68u, 0x9eu, 0x83u, 0xe3u, 0xafu, 0x3eu, 0x9au, 0xf2u, 0x71u,
  0x8eu, 0x44u, 0x28u, 0xaau, 0xb9u, 0x90u, 0x40u, 0x79u, 0x4au, 0x44u, 0xb6u, 0x55u, 0x1au, 0x74u, 0x97u, 0xc3u,
  0x5cu, 0x5eu, 0xa6u, 0x6bu, 0xb8u, 0xeau, 0xadu, 0x62u, 0x9bu, 0xc5u, 0xbeu, 0xe3u, 0x86u, 0xe9u, 0x78u, 0x13u,
  0xf9u, 0x9eu, 0x58u, 0x67u, 0x27u, 0x0fu, 0x98u, 0x26u, 0x83u, 0x9au, 0xc2u, 0x8au, 0xd3u, 0x8eu, 0x83u, 0xa4u,
  0x5cu, 0x7eu, 0xb0u, 0x26u, 0xd3u, 0x58u, 0x4fu, 0x96u, 0x8du, 0xefu, 0x3au, 0x46u, 0x2du, 0x77u, 0xb6u, 0x3bu,
  0x16u, 0xbfu, 0x5bu, 0x3eu, 0xf5u, 0x9fu, 0x76u, 0x8bu, 0x4eu, 0x01u, 0xb6u, 0x8du, 0x07u, 0xdeu, 0xb3u, 0xe9u,
  0x47u, 0x73u, 0x0cu, 0x6du, 0xedu, 0xe5u, 0x7au, 0xe1u, 0x3cu, 0x70u, 0x9eu, 0x05u, 0xf5u, 0x14u, 0xdbu, 0xe9u,
  0x9fu, 0x54u, 0x9cu, 0x0bu, 0x50u, 0x97u, 0xccu, 0x96u, 0x91u, 0xccu, 0x92u, 0x05u, 0x04u, 0x99u, 0x28u, 0x48u,
  0x6bu, 0xb9u, 0x47u, 0x4cu, 0xedu, 0xddu, 0x69u, 0x1bu, 0xc0u, 0x63u, 0x85u, 0xa8u, 0xeau, 0x5eu, 0x90u, 0x5cu,
  0x15u, 0xe9u, 0x93u, 0x0eu, 0x4du, 0x42u, 0x8cu, 0x2fu, 0x10u, 0x54u, 0x8du, 0x0du, 0x4au, 0xe0u, 0x6cu, 0xc8u,
  0x33u, 0x00u, 0xcdu, 0x30u, 0x08u, 0x11u, 0x9au, 0x5cu, 0xc4u, 0x4fu, 0x1bu, 0x2du, 0x22u, 0xa1u, 0x1eu, 0x1au,
  0x4fu, 0x3cu, 0x5cu, 0xf9u, 0xd2u, 0x56u, 0x59u, 0xafu, 0x55u, 0x8au, 0xafu, 0x5bu, 0x46u, 0x6du, 0x48u, 0x24u,
  0x11u, 0x24u, 0x9au, 0x21u, 0x16u, 0xfau, 0x01u, 0x00u, 0x41u, 0x79u, 0x3cu, 0x8bu, 0x58u, 0x2cu, 0x5cu, 0xcfu,
  0x76u, 0x6bu, 0xcfu, 0x4fu, 0x75u, 0xb3u, 0x86u, 0x30u, 0x46u, 0x26u, 0x63u, 0x45u, 0xc5u, 0x67u, 0x01u, 0x11u,
  0x94u, 0x6eu, 0xe1u, 0xdau, 0x1eu, 0xf2u, 0x56u, 0x72u, 0x2cu, 0xa1u, 0x74u, 0x67u, 0x03u, 0xe1u, 0x82u, 0x96u,
  0x6au, 0x0eu, 0x77u, 0x86u, 0xf4u, 0x6bu, 0xc1u, 0x50u, 0xbfu, 0x65u, 0x1du, 0xbcu, 0xc6u, 0x24u, 0x74u, 0x3cu,
  0x0fu, 0xabu, 0x28u, 0x85u, 0x90u, 0xdau, 0x4cu, 0xdcu, 0x19u, 0xb2u, 0x36u, 0x3au, 0x9du, 0x3cu, 0x6eu, 0xdeu,
  0xaeu, 0xfcu, 0xa4u, 0x2cu, 0x29u, 0xccu, 0x18u, 0x08u, 0xb9u, 0xe0u, 0x2eu, 0x3fu, 0x40u, 0x90u, 0xb6u, 0x0cu,
  0x74u, 0xf3u, 0xdcu, 0xf6u, 0x09u, 0xd4u, 0x3fu, 0x8cu, 0x5bu, 0xc2u, 0x4fu, 0x46u, 0x25u, 0xabu, 0xa2u, 0x3fu,
  0x6bu, 0xd5u, 0xa3u, 0x69u, 0x0cu, 0xb5u, 0xa9u, 0xb9u, 0xaau, 0x0eu, 0x57u, 0x16u, 0xdbu, 0x0au, 0x3cu, 0xeeu,
  0x9eu, 0x89u, 0x1eu, 0x5du, 0x19u, 0x37u, 0x75u, 0x41u, 0xe6u, 0xdcu, 0x1cu, 0x74u, 0xceu, 0xe9u, 0xfcu, 0x7cu,
  0xf1u, 0xebu, 0xefu, 0xe3u, 0xa0u, 0x80u, 0x61u, 0x64u, 0xb3u, 0x95u, 0x15u, 0x5cu, 0x04u, 0xdeu, 0xb0u, 0x67u,
  0x0bu, 0xffu, 0x9bu, 0x81u, 0x96u, 0xc5u, 0x85u, 0x9eu, 0x71u, 0x20u, 0x40u, 0x2eu, 0x7au, 0xa1u, 0xfcu, 0x94u,
  0xa2u, 0xfau, 0x7eu, 0x25u, 0x57u, 0xa6u, 0x5cu, 0x1fu, 0x3bu, 0x36u, 0xacu, 0x16u, 0x85u, 0x57u, 0x69u, 0x88u,
  0x24u, 0x1eu, 0xc8u, 0x14u, 0xdcu, 0x11u, 0x06u, 0x72u, 0xe3u, 0x63u, 0x59u, 0x38u, 0xc4u, 0x86u, 0xd0u, 0xa8u,
};

/**
 * Initial state consisting of the decimal expansion of 1/sqrt(11)
 *
 */
constexpr std::uint8_t Draupnir::invSqrt11[512] = {
  0x4du, 0x2fu, 0xd8u, 0xf4u, 0x55u, 0xa0u, 0x97u, 0x87u, 0x71u, 0x4cu, 0x89u, 0x04u, 0x71u, 0xd5u, 0x64u, 0x11u,
  0x03u, 0xcbu, 0x1fu, 0x7au, 0xaau, 0x76u, 0x71u, 0x86u, 0x64u, 0xd2u, 0x29u, 0xeau, 0xfdu, 0xfdu, 0x8eu, 0x66u,
  0xaau, 0x25u, 0x5eu, 0xb5u, 0x18u, 0xbbu, 0x0eu, 0x90u, 0x14u, 0xb6u, 0x22u, 0x1fu, 0xeau, 0xaau, 0x80u, 0x86u,
  0x63u, 0xb0u, 0x31u, 0x94u, 0xa6u, 0x80u, 0xd1u, 0x04u, 0x63u, 0x0du, 0x48u, 0x85u, 0x2eu, 0x72u, 0x79u, 0x86u,
  0x0eu, 0x16u, 0xa9u, 0xaeu, 0x35u, 0x28u, 0x59u, 0x3fu, 0x24u, 0x72u, 0xa6u, 0xa5u, 0xbeu, 0x81u, 0x74u, 0xdau,
  0xf2u, 0xa9u, 0xe4u, 0x0fu, 0xaau, 0x52u, 0x22u, 0x08u, 0x3du, 0x72u, 0xffu, 0x99u, 0x0eu, 0x6bu, 0x5au, 0x89u,
  0xbfu, 0xa4u, 0xadu, 0x4fu, 0xe2u, 0xdau, 0x65u, 0xf0u, 0xf4u, 0x9fu, 0x53u, 0x3bu, 0xa9u, 0x42u, 0x21u, 0xb0u,
  0xebu, 0xacu, 0xfeu, 0x38u, 0x8cu, 0xb5u, 0x8au, 0xd6u, 0x16u, 0xe1u, 0xa3u, 0x8du, 0xf6u, 0x0eu, 0xf6u, 0xbeu,
  0x33u, 0x0cu, 0x7cu, 0x01u, 0x37u, 0x60u, 0xa7u, 0xb4u, 0xccu, 0x5au, 0xddu, 0xddu, 0xeeu, 0x53u, 0x1au, 0x14u,
  0x77u, 0x23u, 0xc9u, 0x01u, 0x66u, 0xbau, 0xbeu, 0xc8u, 0x84u, 0x1du, 0x8eu, 0xa3u, 0x94u, 0xcbu, 0x51u, 0xf2u,
  0x3fu, 0x36u, 0x2eu, 0xaau, 0x39u, 0xadu, 0x7au, 0xb4u, 0xdeu, 0x8fu, 0x44u, 0x29u, 0xd3u, 0xd7u, 0xe4u, 0xb7u,
  0xedu, 0xdcu, 0x43u, 0x79u, 0xe5u, 0x13u, 0xa0u, 0xf0u, 0xdbu, 0x84u, 0x8au, 0x72u, 0xa8u, 0xffu, 0x53u, 0xd1u,
  0xf8u, 0xe9u, 0x78u, 0xa9u, 0x9cu, 0x9cu, 0x9au, 0x6fu, 0x25u, 0xd4u, 0x9du, 0x9bu, 0xd3u, 0x35u, 0x33u, 0x8eu,
  0x17u, 0x22u, 0x0fu, 0xffu, 0x8cu, 0x17u, 0xa5u, 0x94u, 0xddu, 0xdcu, 0xdbu, 0x71u, 0x7cu, 0x1du, 0xa6u, 0xebu,
  0xf5u, 0x38u, 0xf4u, 0xdcu, 0x31u, 0x4au, 0x6fu, 0x81u, 0xd5u, 0x94u, 0x92u, 0x13u, 0x4bu, 0x58u, 0x37u, 0x29u,
  0xe9u, 0x37u, 0x11u, 0xf1u, 0x11u, 0x51u, 0x2bu, 0xc4u, 0x98u, 0xfeu, 0x4cu, 0x9au, 0xdau, 0x55u, 0xafu, 0x0du,
  0x74u, 0x9eu, 0x86u, 0xa3u, 0x41u, 0xb1u, 0xafu, 0x3au, 0xf3u, 0x58u, 0x3bu, 0x6au, 0xc9u, 0x8bu, 0xa6u, 0xc7u,
  0x61u, 0x85u, 0x00u, 0x5au, 0x78u, 0x41u, 0x43u, 0x6cu, 0x78u, 0x93u, 0x61u, 0x91u, 0x78u, 0x00u, 0x85u, 0x40u,
  0x24u, 0x01u, 0xf2u, 0xbbu, 0x4fu, 0xb1u, 0xe7u, 0xffu, 0x0fu, 0xf5u, 0x68u, 0xd8u, 0x0du, 0x44u, 0xcfu, 0x7cu,
  0xe9u, 0xe2u, 0x8bu, 0x6au, 0x71u, 0x5eu, 0xc4u, 0xeeu, 0xceu, 0x0eu, 0xb3u, 0x40u, 0xbfu, 0x14u, 0xa7u, 0x6bu,
  0xbdu, 0x4cu, 0x6bu, 0xf5u, 0xdfu, 0xe0u, 0x9du, 0x2bu, 0x05u, 0x46u, 0x2fu, 0x9cu, 0x16u, 0x03u, 0x9fu, 0x8eu,
  0x59u, 0xb3u, 0xceu, 0xdbu, 0xa3u, 0xf1u, 0x8du, 0xadu, 0x6bu, 0x90u, 0xd5u, 0x61u, 0x86u, 0x9eu, 0x81u, 0x78u,
  0xd7u, 0xe9u, 0x37u, 0x35u, 0xf3u, 0x1eu, 0x6au, 0x02u, 0x95u, 0x72u, 0xdcu, 0x4cu, 0xd3u, 0xd3u, 0xa5u, 0xa6u,
  0xe6u, 0x99u, 0xd3u, 0xf0u, 0xabu, 0x96u, 0x28u, 0xc6u, 0x6du, 0x3eu, 0xe8u, 0x7du, 0xe0u, 0x1fu, 0x70u, 0xefu,
  0xddu, 0x67u, 0xaeu, 0x1cu, 0x38u, 0x3au, 0x41u, 0x72u, 0x75u, 0x3eu, 0xdcu, 0x21u, 0x1cu, 0xa9u, 0xb8u, 0x6bu,
  0x92u, 0x05u, 0xbbu, 0xceu, 0xddu, 0x40u, 0xd2u, 0x45u, 0x2au, 0xceu, 0xbdu, 0x02u, 0x91u, 0xf5u, 0x61u, 0x21u,
  0x97u, 0x6du, 0xc6u, 0x57u, 0x44u, 0x23u, 0x1bu, 0x8cu, 0x2du, 0x25u, 0xb2u, 0x06u, 0x8du, 0x24u, 0x5eu, 0xb5u,
  0xbdu, 0x3eu, 0x39u, 0x18u, 0x5au, 0xc0u, 0x29u, 0xe8u, 0x5fu, 0x46u, 0xc5u, 0xe9u, 0x25u, 0x2au, 0x96u, 0xd2u,
  0x8au, 0xe6u, 0x80u, 0x02u, 0x0eu, 0x6cu, 0xe1u, 0x99u, 0xd2u, 0xc7u, 0x42u, 0xacu, 0x18u, 0x1bu, 0xa2u, 0x4cu,
  0xdau, 0x07u, 0x63u, 0x27u, 0x42u, 0x93u, 0x13u, 0x8bu, 0x0eu, 0x06u, 0x87u, 0x7du, 0x4eu, 0x0eu, 0xd7u, 0xcau,
  0xf3u, 0x41u, 0xddu, 0xbeu, 0xfcu, 0xdau, 0xf4u, 0xbbu, 0x69u, 0xb5u, 0x22u, 0x40u, 0x06u, 0xa3u, 0x9cu, 0xecu,
  0xf0u, 0x52u, 0x54u, 0x2du, 0x58u, 0xa5u, 0xc3u, 0x6du, 0xa7u, 0xa9u, 0x25u, 0x55u, 0x3du, 0x47u, 0xd3u, 0xa4u,
};


/**
 * Virtual copy constructor - should not be needed either way
 *
 * @return the constructed object
 */
DraupnirCrc64Builder *DraupnirCrc64Builder::clone() const noexcept {
  return new DraupnirCrc64Builder(*this);
}

/**
 * Virtual default constructor - should not be needed either way
 *
 * @return the constructed object
 */
DraupnirCrc64Builder *DraupnirCrc64Builder::create() const noexcept {
  return new DraupnirCrc64Builder();
}

/**
 * Generator parameter materialization
 *
 * @param __generator  Generator polynomial to use, little endian, with its most significant bit omitted, defaults to ECMA
 * @return a reference to the current object
 */
DraupnirCrc64Builder &DraupnirCrc64Builder::generator(std::uint64_t __generator) noexcept {
  _generator = __generator;
  return *this;
}

/**
 * Initial value parameter materialization
 *
 * @param __initialValue  Initial value to use for crc, defaults to all-1s
 * @return a reference to the current object
 */
DraupnirCrc64Builder &DraupnirCrc64Builder::initialValue(std::uint64_t __initialValue) noexcept {
  _initialValue = __initialValue;
  return *this;
}

/**
 * Xor value parameter materialization
 *
 * @param __xorValue  Value to XOR with the crc to obtain the result, defaults to all-1s
 * @return a reference to the current object
 */
DraupnirCrc64Builder &DraupnirCrc64Builder::xorValue(std::uint64_t __xorValue) noexcept {
  _xorValue = __xorValue;
  return *this;
}

/**
 * Soaking rounds parameter materialization
 *
 * @param __soakingRounds  Number of transformation rounds to apply after soaking, defaults to 8
 * @return a reference to the current object
 */
DraupnirCrc64Builder &DraupnirCrc64Builder::soakingRounds(std::size_t __soakingRounds) noexcept {
  _soakingRounds = __soakingRounds;
  return *this;
}

/**
 * Squeezing rounds parameter materialization
 *
 * @param __squeezingRounds  Rounds  Number of transformation rounds to apply after squeezing, defaults to 1
 * @return a reference to the current object
 */
DraupnirCrc64Builder &DraupnirCrc64Builder::squeezingRounds(std::size_t __squeezingRounds) noexcept {
  _squeezingRounds = __squeezingRounds;
  return *this;
}

/**
 * Initial state parameter materialization
 *
 * @param __initialState  Initial state to use, defaults to pi
 * @return a reference to the current object
 */
DraupnirCrc64Builder &DraupnirCrc64Builder::initialState(std::uint8_t const __initialState[512]) noexcept {
  for (std::size_t i = 0; i < 512; i++) {
    _initialState[i] = __initialState[i];
  }
  return *this;
}

/**
 * Force the building of a Draupnir RNG (useful for "auto" type specifiers)
 *
 * @return the constructed DraupnirCrc64 object
 */
DraupnirCrc64 DraupnirCrc64Builder::build() noexcept {
  return DraupnirCrc64(*this);
}

/**
 * Protected default constructor
 *
 * The constructor is protected to only allow construction through Draupnir.
 *
 */
DraupnirCrc64Builder::DraupnirCrc64Builder() noexcept : _generator {0x42f0e1eba9ea3693ull}, _initialValue {~0ull}, _xorValue {~0ull}, _soakingRounds {8}, _squeezingRounds {1} {
  for (std::size_t i = 0; i < 512; i++) {
    _initialState[i] = Draupnir::pi[i];
  }
}


/**
 * Implicit conversion constructor to implement named-constructor-with-named-parameters idiom
 *
 * @param builder  A DraupnirCrc64Builder object to use for parameters
 */
DraupnirCrc64::DraupnirCrc64(const DraupnirCrc64Builder &builder) noexcept
  : DraupnirCrc64 {builder._generator, builder._initialValue, builder._xorValue, builder._soakingRounds, builder._squeezingRounds, builder._initialState}
{
}

/**
 * Virtual copy constructor
 *
 * @return the constructed object
 */
DraupnirCrc64 *DraupnirCrc64::clone() const noexcept {
  return new DraupnirCrc64(*this);
}

/**
 * Virtual default constructor
 *
 * @param __generator  Generator polynomial to use, little endian, with its most significant bit omitted, defaults to ECMA
 * @param __initialValue  Initial value to use for crc, defaults to all-1s
 * @param __xorValue  Value to XOR with the crc to obtain the result, defaults to all-1s
 * @param __soakingRounds  Number of transformation rounds to apply after soaking, defaults to 8
 * @param __squeezingRounds  Rounds  Number of transformation rounds to apply after squeezing, defaults to 1
 * @param __initialState  Initial state to use, defaults to pi
 * @return the constructed object
 */
DraupnirCrc64 *DraupnirCrc64::create(std::uint64_t __generator, std::uint64_t __initialValue, std::uint64_t __xorValue, std::size_t __soakingRounds, std::size_t __squeezingRounds, const std::uint8_t __initialState[512]) const noexcept {
  return new DraupnirCrc64(__generator, __initialValue, __xorValue, __soakingRounds, __squeezingRounds, __initialState);
}

/**
 * Extract a byte from the RNG
 *
 * This method squeezes the Draupnir sponge and extracts a byte from it.
 *
 * @return the byte extracted
 */
std::uint8_t DraupnirCrc64::getByte() noexcept {
  if (_remaining <= 0) {
    std::uint64_t temp = squeeze();
    _buffer[0] = static_cast<std::uint8_t>(temp >> 56);
    _buffer[1] = static_cast<std::uint8_t>(temp >> 48);
    _buffer[2] = static_cast<std::uint8_t>(temp >> 40);
    _buffer[3] = static_cast<std::uint8_t>(temp >> 32);
    _buffer[4] = static_cast<std::uint8_t>(temp >> 24);
    _buffer[5] = static_cast<std::uint8_t>(temp >> 16);
    _buffer[6] = static_cast<std::uint8_t>(temp >>  8);
    _buffer[7] = static_cast<std::uint8_t>(temp      );
    _remaining = 8;
  }

  return _buffer[--_remaining];
}

/**
 * Inject a byte string into the RNG
 *
 * This method soakes the Draupnir RNG in (a multi.rate padding of) the
 * given byte string.
 *
 * @param data  Pointer to a byte string
 * @param len  Length of the byte stream
 * @return the soaked object
 */
DraupnirCrc64 &DraupnirCrc64::putBytes(const std::uint8_t *data, std::size_t len) noexcept {
  std::size_t i;

  // deal with 64-bit chunks
  for (i = 0; 8 <= len; len -= 8, i += 8) {
    soak(*reinterpret_cast<std::uint64_t const *>(&data[i]));
  }

  // deal with remaining semi-chunks
  {
    std::uint64_t block = 0ull;
    for (std::size_t m = len; 0 < m; m--, i++) {
      block |= data[i]; block <<= 8;
    }
    // add the multi-rate-padding "header" as the last byte
    block |= 0x80ull;
    // if we have to make room, do so now (nb. if n == 7 we have all we need)
    if (len < 7) {
      block <<= 8 * (7 - len);
    }
    // add the multi-rate-padding "tail" as the last byte
    block |= 0x01ull;

    // now soak the resulting last block
    soak(block);
  }

  // return a reference to the sponge
  return *this;
}

/**
 * Apply a transformation step
 *
 * This method applies a given number of rounds of the transformation
 * function to the Draupnir sponge.
 *
 * @param count  Number of rounds to apply, defaults to 1
 * @return the transformed object
 */
DraupnirCrc64 &DraupnirCrc64::step(std::size_t count) noexcept {
  for (std::size_t i = 0; i < count; i++) {
    transform();
  }

  return *this;
}

/**
 * Reset the Draupnir sponge
 *
 * This method resets the Draupnir sponge to the given state
 *
 * @param __initialState  State to reset to, defaults to pi
 * @return the reset object
 */
DraupnirCrc64 &DraupnirCrc64::reset(const std::uint8_t __initialState[512]) noexcept {
  const std::uint64_t *init = reinterpret_cast<const std::uint64_t *>(__initialState);
  for (std::size_t i = 0; i < 64; i++) {
    _state[i] = init[i];
  }

  return *this;
}

/**
 * Extract a state description structure
 *
 * @return the state description structure extracted form the current object
 */
DraupnirCrc64::state_t DraupnirCrc64::state() const noexcept {
  DraupnirCrc64::state_t result;
  result.generator       = _generator;
  result.crc             = _crc;
  result.initialValue    = _initialValue;
  result.soakingRounds   = _soakingRounds;
  result.squeezingRounds = _squeezingRounds;
  for (std::size_t i = 0; i < 64; i++) {
    result.state[i] = _state[i];
  }
  return result;
}

/**
 * DraupnirCrc64 constructor
 *
 * @param __generator  Generator polynomial to use, little endian, with its most significant bit omitted, defaults to ECMA
 * @param __initialValue  Initial value to use for crc, defaults to all-1s
 * @param __xorValue  Value to XOR with the crc to obtain the result, defaults to all-1s
 * @param __soakingRounds  Number of transformation rounds to apply after soaking, defaults to 8
 * @param __squeezingRounds  Rounds  Number of transformation rounds to apply after squeezing, defaults to 1
 * @param __initialState  Initial state to use, defaults to pi
 */
DraupnirCrc64::DraupnirCrc64(std::uint64_t __generator, std::uint64_t __initialValue, std::uint64_t __xorValue, std::size_t __soakingRounds, std::size_t __squeezingRounds, const std::uint8_t __initialState[512]) noexcept
  : _generator {__generator}, _crc {__initialValue}, _initialValue {__initialValue}, _xorValue {__xorValue}, _soakingRounds {__soakingRounds}, _squeezingRounds {__squeezingRounds}, _remaining {0}, _crcTable {buildTable(_generator)}
{
  reset(__initialState);
}

/**
 * Apply the transformation function to the Draupnir sponge
 *
 */
void DraupnirCrc64::transform() noexcept {
  static std::uint64_t temp[64];

  // fill temporary and clear current state
  std::uint8_t *data = reinterpret_cast<std::uint8_t *>(_state);
  for (std::size_t i = 0, j = 0; i < 512; i += 8, j++) {
    for (std::size_t k = 0; k < 8; k++) {
      _crc = _crcTable.get()[(_crc ^ *(data++)) & 0xffull] ^ (_crc >> 8);
    }
    temp[j] = _crc ^ _xorValue;
    _state[j] = 0ull;
  }

  // transpose temporary into state
  for (std::size_t i = 0; i < 63; i++) {
    _state[0] ^= static_cast<std::uint64_t>((temp[i] & 0x8000000000000000ull) != 0) << (63 - i);
    for (std::size_t j = 1; j < 64; j++) {
      _state[j] ^= static_cast<std::uint64_t>((temp[i] & (0x8000000000000000ull >> j)) != 0) << (63 - i);
    }
  }
  _state[0] ^= static_cast<std::uint64_t>((temp[63] & 0x8000000000000000ull) != 0);
  for (std::size_t j = 1; j < 64; j++) {
    _state[j] ^= static_cast<std::uint64_t>((temp[63] & (0x8000000000000000ull >> j)) != 0);
  }
}

/**
 * Squeeze the Draupnir sponge
 *
 * @return the squeezed 64 bits
 */
std::uint64_t DraupnirCrc64::squeeze() noexcept {
  std::uint64_t diag = 0ull;
  for (std::size_t i = 1; i < 64; i += 2) {
    diag |= _state[i] & ((0x8000000000000000ull >> i) | (0x0000000000000001ull << i));
  }
  step(_squeezingRounds);
  return diag;
}

/**
 * Soak a 64 bit value into the sponge
 *
 * @param block  64 bits to soak into the sponge
 */
void DraupnirCrc64::soak(std::uint64_t block) noexcept {
  _state[0] ^= (_state[0] ^ block) & 0x8000000000000001ull;
  for (std::size_t i = 2; i < 64; i += 2) {
    // derived from: https://graphics.stanford.edu/~seander/bithacks.html#MaskedMerge
    _state[i] ^= (_state[i] ^ block) & ((0x8000000000000000ull >> i) | (0x0000000000000001ull << i));
  }
  step(_soakingRounds);
}

/**
 * Build a CRC64 lookup table
 *
 * @param __generator  Generator polynomial to use, little endian, with its most significant bit omitted
 * @return a new[]-allocated lookup table
 */
std::uint64_t *DraupnirCrc64::buildTable(std::uint64_t __generator) noexcept {
  // returned array
  std::uint64_t *table = new std::uint64_t[256]();

  // calculate initial slice
  for (std::size_t i = 0; i < 256; i++) {
    // get the reversed byte to the top
    table[i] = i << 56;

    // divide away
    table[i] = (table[i] << 1) ^ ((table[i] & 0x8000000000000000ull) ? __generator : 0ull);
    table[i] = (table[i] << 1) ^ ((table[i] & 0x8000000000000000ull) ? __generator : 0ull);
    table[i] = (table[i] << 1) ^ ((table[i] & 0x8000000000000000ull) ? __generator : 0ull);
    table[i] = (table[i] << 1) ^ ((table[i] & 0x8000000000000000ull) ? __generator : 0ull);
    table[i] = (table[i] << 1) ^ ((table[i] & 0x8000000000000000ull) ? __generator : 0ull);
    table[i] = (table[i] << 1) ^ ((table[i] & 0x8000000000000000ull) ? __generator : 0ull);
    table[i] = (table[i] << 1) ^ ((table[i] & 0x8000000000000000ull) ? __generator : 0ull);
    table[i] = (table[i] << 1) ^ ((table[i] & 0x8000000000000000ull) ? __generator : 0ull);
  }

  // return the generated table
  return table;
}

